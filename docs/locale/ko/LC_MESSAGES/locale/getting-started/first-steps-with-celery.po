# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../getting-started/first-steps-with-celery.rst:6
msgid "First Steps with Celery"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:8
msgid ""
"Celery is a task queue with batteries included. It's easy to use so that "
"you can get started without learning the full complexities of the problem"
" it solves. It's designed around best practices so that your product can "
"scale and integrate with other languages, and it comes with the tools and"
" support you need to run such a system in production."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:15
msgid "In this tutorial you'll learn the absolute basics of using Celery."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:17
msgid "Learn about;"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:19
msgid "Choosing and installing a message transport (broker)."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:20
msgid "Installing Celery and creating your first task."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:21
msgid "Starting the worker and calling tasks."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:22
msgid ""
"Keeping track of tasks as they transition through different states, and "
"inspecting return values."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:25
msgid ""
"Celery may seem daunting at first - but don't worry - this tutorial will "
"get you started in no time. It's deliberately kept simple, so as to not "
"confuse you with advanced features. After you have finished this "
"tutorial, it's a good idea to browse the rest of the documentation. For "
"example the :ref:`next-steps` tutorial will showcase Celery's "
"capabilities."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:39
msgid "Choosing a Broker"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:41
msgid ""
"Celery requires a solution to send and receive messages; usually this "
"comes in the form of a separate service called a *message broker*."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:44
msgid "There are several choices available, including:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:47
msgid "RabbitMQ"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:49
msgid ""
"`RabbitMQ`_ is feature-complete, stable, durable and easy to install. "
"It's an excellent choice for a production environment. Detailed "
"information about using RabbitMQ with Celery:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:53
msgid ":ref:`broker-rabbitmq`"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:57
msgid ""
"If you're using Ubuntu or Debian install RabbitMQ by executing this "
"command:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:64
msgid "Or, if you want to run it on Docker execute this:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:70
msgid ""
"When the command completes, the broker will already be running in the "
"background, ready to move messages for you: ``Starting rabbitmq-server: "
"SUCCESS``."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:73
msgid ""
"Don't worry if you're not running Ubuntu or Debian, you can go to this "
"website to find similarly simple installation instructions for other "
"platforms, including Microsoft Windows:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:77
msgid "http://www.rabbitmq.com/download.html"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:80
msgid "Redis"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:82
msgid ""
"`Redis`_ is also feature-complete, but is more susceptible to data loss "
"in the event of abrupt termination or power failures. Detailed "
"information about using Redis:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:85
msgid ":ref:`broker-redis`"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:89
msgid "If you want to run it on Docker execute this:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:96
msgid "Other brokers"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:98
msgid ""
"In addition to the above, there are other experimental transport "
"implementations to choose from, including :ref:`Amazon SQS <broker-sqs>`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:101
msgid "See :ref:`broker-overview` for a full list."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:106
msgid "Installing Celery"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:108
msgid ""
"Celery is on the Python Package Index (PyPI), so it can be installed with"
" standard Python tools like ``pip`` or ``easy_install``:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:116
msgid "Application"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:118
msgid ""
"The first thing you need is a Celery instance.  We call this the *Celery "
"application* or just *app* for short. As this instance is used as the "
"entry-point for everything you want to do in Celery, like creating tasks "
"and managing workers, it must be possible for other modules to import it."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:123
msgid ""
"In this tutorial we keep everything contained in a single module, but for"
" larger projects you want to create a :ref:`dedicated module <project-"
"layout>`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:127
msgid "Let's create the file :file:`tasks.py`:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:139
msgid ""
"The first argument to :class:`~celery.app.Celery` is the name of the "
"current module. This is only needed so that names can be automatically "
"generated when the tasks are defined in the `__main__` module."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:143
msgid ""
"The second argument is the broker keyword argument, specifying the URL of"
" the message broker you want to use. Here using RabbitMQ (also the "
"default option)."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:146
msgid ""
"See :ref:`celerytut-broker` above for more choices -- for RabbitMQ you "
"can use ``amqp://localhost``, or for Redis you can use "
"``redis://localhost``."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:150
msgid ""
"You defined a single task, called ``add``, returning the sum of two "
"numbers."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:155
msgid "Running the Celery worker server"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:157
msgid ""
"You can now run the worker by executing our program with the ``worker`` "
"argument:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:166
msgid ""
"See the :ref:`celerytut-troubleshooting` section if the worker doesn't "
"start."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:169
msgid ""
"In production you'll want to run the worker in the background as a "
"daemon. To do this you need to use the tools provided by your platform, "
"or something like `supervisord`_ (see :ref:`daemonizing` for more "
"information)."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:174
msgid "For a complete listing of the command-line options available, do:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:180
msgid ""
"There are also several other commands available, and help is also "
"available:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:191
msgid "Calling the task"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:193
msgid "To call our task you can use the :meth:`~@Task.delay` method."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:195
msgid ""
"This is a handy shortcut to the :meth:`~@Task.apply_async` method that "
"gives greater control of the task execution (see :ref:`guide-calling`)::"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:202
msgid ""
"The task has now been processed by the worker you started earlier. You "
"can verify this by looking at the worker's console output."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:205
msgid ""
"Calling a task returns an :class:`~@AsyncResult` instance. This can be "
"used to check the state of the task, wait for the task to finish, or get "
"its return value (or if the task failed, to get the exception and "
"traceback)."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:209
msgid ""
"Results are not enabled by default. In order to do remote procedure calls"
" or keep track of task results in a database, you will need to configure "
"Celery to use a result backend.  This is described in the next section."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:216
msgid "Keeping Results"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:218
msgid ""
"If you want to keep track of the tasks' states, Celery needs to store or "
"send the states somewhere. There are several built-in result backends to "
"choose from: `SQLAlchemy`_/`Django`_ ORM, `Memcached`_, `Redis`_, "
":ref:`RPC <conf-rpc-result-backend>` (`RabbitMQ`_/AMQP), and -- or you "
"can define your own."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:229
msgid ""
"For this example we use the `rpc` result backend, that sends states back "
"as transient messages. The backend is specified via the ``backend`` "
"argument to :class:`@Celery`, (or via the :setting:`result_backend` "
"setting if you choose to use a configuration module):"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:238
msgid ""
"Or if you want to use Redis as the result backend, but still use RabbitMQ"
" as the message broker (a popular combination):"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:245
msgid "To read more about result backends please see :ref:`task-result-backends`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:247
msgid ""
"Now with the result backend configured, let's call the task again. This "
"time you'll hold on to the :class:`~@AsyncResult` instance returned when "
"you call a task:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:255
msgid ""
"The :meth:`~@AsyncResult.ready` method returns whether the task has "
"finished processing or not:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:263
msgid ""
"You can wait for the result to complete, but this is rarely used since it"
" turns the asynchronous call into a synchronous one:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:271
msgid ""
"In case the task raised an exception, :meth:`~@AsyncResult.get` will re-"
"raise the exception, but you can override this by specifying the "
"``propagate`` argument:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:280
msgid ""
"If the task raised an exception, you can also gain access to the original"
" traceback:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:289
msgid ""
"Backends use resources to store and transmit results. To ensure that "
"resources are released, you must eventually call "
":meth:`~@AsyncResult.get` or :meth:`~@AsyncResult.forget` on EVERY "
":class:`~@AsyncResult` instance returned after calling a task."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:295
msgid "See :mod:`celery.result` for the complete result object reference."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:300
msgid "Configuration"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:302
msgid ""
"Celery, like a consumer appliance, doesn't need much configuration to "
"operate. It has an input and an output. The input must be connected to a "
"broker, and the output can be optionally connected to a result backend. "
"However, if you look closely at the back, there's a lid revealing loads "
"of sliders, dials, and buttons: this is the configuration."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:307
msgid ""
"The default configuration should be good enough for most use cases, but "
"there are many options that can be configured to make Celery work exactly"
" as needed. Reading about the options available is a good idea to "
"familiarize yourself with what can be configured. You can read about the "
"options in the :ref:`configuration` reference."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:313
msgid ""
"The configuration can be set on the app directly or by using a dedicated "
"configuration module. As an example you can configure the default "
"serializer used for serializing task payloads by changing the "
":setting:`task_serializer` setting:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:322
msgid "If you're configuring many settings at once you can use ``update``:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:334
msgid ""
"For larger projects, a dedicated configuration module is recommended. "
"Hard coding periodic task intervals and task routing options is "
"discouraged. It is much better to keep these in a centralized location. "
"This is especially true for libraries, as it enables users to control how"
" their tasks behave. A centralized configuration will also allow your "
"SysAdmin to make simple changes in the event of system trouble."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:341
msgid ""
"You can tell your Celery instance to use a configuration module by "
"calling the :meth:`@config_from_object` method:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:348
msgid ""
"This module is often called \"``celeryconfig``\", but you can use any "
"module name."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:351
msgid ""
"In the above case, a module named ``celeryconfig.py`` must be available "
"to load from the current directory or on the Python path. It could look "
"something like this:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:354
#: ../../getting-started/first-steps-with-celery.rst:379
#: ../../getting-started/first-steps-with-celery.rst:391
msgid ":file:`celeryconfig.py`:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:367
msgid ""
"To verify that your configuration file works properly and doesn't contain"
" any syntax errors, you can try to import it:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:374
msgid ""
"For a complete reference of configuration options, see "
":ref:`configuration`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:376
msgid ""
"To demonstrate the power of configuration files, this is how you'd route "
"a misbehaving task to a dedicated queue:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:387
msgid ""
"Or instead of routing it you could rate limit the task instead, so that "
"only 10 tasks of this type can be processed in a minute (10/m):"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:399
msgid ""
"If you're using RabbitMQ or Redis as the broker then you can also direct "
"the workers to set a new rate limit for the task at runtime:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:409
msgid ""
"See :ref:`guide-routing` to read more about task routing, and the "
":setting:`task_annotations` setting for more about annotations, or :ref"
":`guide-monitoring` for more about remote control commands and how to "
"monitor what your workers are doing."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:415
msgid "Where to go from here"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:417
msgid ""
"If you want to learn more you should continue to the :ref:`Next Steps "
"<next-steps>` tutorial, and after that you can read the :ref:`User Guide "
"<guide>`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:424
msgid "Troubleshooting"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:426
msgid "There's also a troubleshooting section in the :ref:`faq`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:429
msgid "Worker doesn't start: Permission Error"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:431
msgid "If you're using Debian, Ubuntu or other Debian-based distributions:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:433
msgid ""
"Debian recently renamed the :file:`/dev/shm` special file to "
":file:`/run/shm`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:436
msgid "A simple workaround is to create a symbolic link:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:442
msgid "Others:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:444
msgid ""
"If you provide any of the :option:`--pidfile <celery worker --pidfile>`, "
":option:`--logfile <celery worker --logfile>` or :option:`--statedb "
"<celery worker --statedb>` arguments, then you must make sure that they "
"point to a file or directory that's writable and readable by the user "
"starting the worker."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:451
msgid "Result backend doesn't work or tasks are always in ``PENDING`` state"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:453
msgid ""
"All tasks are :state:`PENDING` by default, so the state would've been "
"better named \"unknown\". Celery doesn't update the state when a task is "
"sent, and any task with no history is assumed to be pending (you know the"
" task id, after all)."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:458
msgid "Make sure that the task doesn't have ``ignore_result`` enabled."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:460
msgid "Enabling this option will force the worker to skip updating states."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:463
msgid "Make sure the :setting:`task_ignore_result` setting isn't enabled."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:465
msgid "Make sure that you don't have any old workers still running."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:467
msgid ""
"It's easy to start multiple workers by accident, so make sure that the "
"previous worker is properly shut down before you start a new one."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:470
msgid ""
"An old worker that isn't configured with the expected result backend may "
"be running and is hijacking the tasks."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:473
msgid ""
"The :option:`--pidfile <celery worker --pidfile>` argument can be set to "
"an absolute path to make sure this doesn't happen."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:476
msgid "Make sure the client is configured with the right backend."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:478
msgid ""
"If, for some reason, the client is configured to use a different backend "
"than the worker, you won't be able to receive the result. Make sure the "
"backend is configured correctly:"
msgstr ""

