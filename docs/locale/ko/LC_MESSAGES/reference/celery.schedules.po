# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../reference/celery.schedules.rst:3
msgid "``celery.schedules``"
msgstr ""

#: celery.schedules:1 of
msgid "Schedules define the intervals at which periodic tasks run."
msgstr ""

#: celery.schedules.ParseException:1
#: celery.schedules.crontab_parser.ParseException:1 of
msgid "Raised by :class:`crontab_parser` when the input can't be parsed."
msgstr ""

#: celery.schedules.schedule:1 of
msgid "Schedule for periodic task."
msgstr ""

#: celery.schedules.schedule celery.schedules.solar of
msgid "Parameters"
msgstr ""

#: celery.schedules.schedule:3 of
msgid "Time interval."
msgstr ""

#: celery.schedules.schedule:5 of
msgid ""
"If set to True the run time will be rounded to the resolution of the "
"interval."
msgstr ""

#: celery.schedules.crontab:61 celery.schedules.schedule:8 of
msgid ""
"Function returning the current date and time "
"(:class:`~datetime.datetime`)."
msgstr ""

#: celery.schedules.schedule:11 celery.schedules.solar:30 of
msgid "Celery app instance."
msgstr ""

#: celery.schedules.schedule.is_due:1 of
msgid "Return tuple of ``(is_due, next_time_to_check)``."
msgstr ""

#: celery.schedules.schedule.is_due:4 celery.schedules.solar:7 of
msgid "Notes"
msgstr ""

#: celery.schedules.schedule.is_due:5 of
msgid "next time to check is in seconds."
msgstr ""

#: celery.schedules.schedule.is_due:8 of
msgid "``(True, 20)``, means the task should be run now, and the next"
msgstr ""

#: celery.schedules.schedule.is_due:8 of
msgid "time to check is in 20 seconds."
msgstr ""

#: celery.schedules.schedule.is_due:10 of
msgid ""
"``(False, 12.3)``, means the task is not due, but that the scheduler "
"should check again in 12.3 seconds."
msgstr ""

#: celery.schedules.schedule.is_due:13 of
msgid ""
"The next time to check is used to save energy/CPU cycles, it does not "
"need to be accurate but will influence the precision of your schedule.  "
"You must also keep in mind the value of "
":setting:`beat_max_loop_interval`, that decides the maximum number of "
"seconds the scheduler can sleep between re-checking the periodic task "
"intervals.  So if you have a task that changes schedule at run-time then "
"your next_run_at check will decide how long it will take before a change "
"to the schedule takes effect.  The max loop interval takes precedence "
"over the next check at value returned."
msgstr ""

#: celery.schedules.schedule.is_due:24 of
msgid "Scheduler max interval variance"
msgstr ""

#: celery.schedules.schedule.is_due:26 of
msgid ""
"The default max loop interval may vary for different schedulers. For the "
"default scheduler the value is 5 minutes, but for example the :pypi"
":`django-celery-beat` database scheduler the value is 5 seconds."
msgstr ""

#: celery.schedules.crontab:1 of
msgid "Crontab schedule."
msgstr ""

#: celery.schedules.crontab:3 of
msgid ""
"A Crontab can be used as the ``run_every`` value of a periodic task entry"
" to add :manpage:`crontab(5)`-like scheduling."
msgstr ""

#: celery.schedules.crontab:6 of
msgid ""
"Like a :manpage:`cron(5)`-job, you can specify units of time of when "
"you'd like the task to execute.  It's a reasonably complete "
"implementation of :command:`cron`'s features, so it should provide a fair"
" degree of scheduling needs."
msgstr ""

#: celery.schedules.crontab:11 of
msgid ""
"You can specify a minute, an hour, a day of the week, a day of the month,"
" and/or a month in the year in any of the following formats:"
msgstr ""

#: celery.schedules.crontab:16 of
msgid ""
"A (list of) integers from 0-59 that represent the minutes of an hour of "
"when execution should occur; or"
msgstr ""

#: celery.schedules.crontab:18 of
msgid ""
"A string representing a Crontab pattern.  This may get pretty advanced, "
"like ``minute='*/15'`` (for every quarter) or "
"``minute='1,13,30-45,50-59/2'``."
msgstr ""

#: celery.schedules.crontab:24 of
msgid ""
"A (list of) integers from 0-23 that represent the hours of a day of when "
"execution should occur; or"
msgstr ""

#: celery.schedules.crontab:26 of
msgid ""
"A string representing a Crontab pattern.  This may get pretty advanced, "
"like ``hour='*/3'`` (for every three hours) or ``hour='0,8-17/2'`` (at "
"midnight, and every two hours during office hours)."
msgstr ""

#: celery.schedules.crontab:33 of
msgid ""
"A (list of) integers from 0-6, where Sunday = 0 and Saturday = 6, that "
"represent the days of a week that execution should occur."
msgstr ""

#: celery.schedules.crontab:36 of
msgid ""
"A string representing a Crontab pattern.  This may get pretty advanced, "
"like ``day_of_week='mon-fri'`` (for weekdays only). (Beware that "
"``day_of_week='*/2'`` does not literally mean 'every two days', but "
"'every day that is divisible by two'!)"
msgstr ""

#: celery.schedules.crontab:43 of
msgid ""
"A (list of) integers from 1-31 that represents the days of the month that"
" execution should occur."
msgstr ""

#: celery.schedules.crontab:45 of
msgid ""
"A string representing a Crontab pattern.  This may get pretty advanced, "
"such as ``day_of_month='2-30/2'`` (for every even numbered day) or "
"``day_of_month='1-7,15-21'`` (for the first and third weeks of the "
"month)."
msgstr ""

#: celery.schedules.crontab:52 of
msgid ""
"A (list of) integers from 1-12 that represents the months of the year "
"during which execution can occur."
msgstr ""

#: celery.schedules.crontab:54 of
msgid ""
"A string representing a Crontab pattern.  This may get pretty advanced, "
"such as ``month_of_year='*/3'`` (for the first month of every quarter) or"
" ``month_of_year='2-12/2'`` (for every even numbered month)."
msgstr ""

#: celery.schedules.crontab:66 of
msgid "The Celery app instance."
msgstr ""

#: celery.schedules.crontab:68 of
msgid ""
"It's important to realize that any day on which execution should occur "
"must be represented by entries in all three of the day and month "
"attributes.  For example, if ``day_of_week`` is 0 and ``day_of_month`` is"
" every seventh day, only months that begin on Sunday and are also in the "
"``month_of_year`` attribute will have execution events.  Or, "
"``day_of_week`` is 1 and ``day_of_month`` is '1-7,15-21' means every "
"first and third Monday of every month present in ``month_of_year``."
msgstr ""

#: celery.schedules.crontab.is_due:1 celery.schedules.solar.is_due:1 of
msgid "Return tuple of ``(is_due, next_time_to_run)``."
msgstr ""

#: celery.schedules.crontab.is_due:3 of
msgid "Next time to run is in seconds."
msgstr ""

#: celery.schedules.crontab.is_due:5 of
msgid "SeeAlso:"
msgstr ""

#: celery.schedules.crontab.is_due:6 celery.schedules.solar.is_due:5 of
msgid ":meth:`celery.schedules.schedule.is_due` for more information."
msgstr ""

#: celery.schedules.crontab.remaining_estimate:1 of
msgid "Estimate of next run time."
msgstr ""

#: celery.schedules.crontab.remaining_estimate:3 of
msgid ""
"Returns when the periodic task should run next as a "
":class:`~datetime.timedelta`."
msgstr ""

#: celery.schedules.crontab_parser:1 of
msgid "Parser for Crontab expressions."
msgstr ""

#: celery.schedules.crontab_parser:3 of
msgid ""
"Any expression of the form 'groups' (see BNF grammar below) is accepted "
"and expanded to a set of numbers. These numbers represent the units of "
"time that the Crontab needs to run on:"
msgstr ""

#: celery.schedules.crontab_parser:19 of
msgid ""
"The parser is a general purpose one, useful for parsing hours, minutes "
"and day of week expressions.  Example usage:"
msgstr ""

#: celery.schedules.crontab_parser:31 of
msgid ""
"It can also parse day of month and month of year expressions if "
"initialized with a minimum of 1.  Example usage:"
msgstr ""

#: celery.schedules.crontab_parser:43 of
msgid "The maximum possible expanded value returned is found by the formula:"
msgstr ""

#: celery.schedules.crontab_parser:45 of
msgid ":math:`max_ + min_ - 1`"
msgstr ""

#: celery.schedules.maybe_schedule:1 of
msgid "Return schedule from number, timedelta, or actual schedule."
msgstr ""

#: celery.schedules.solar:1 of
msgid "Solar event."
msgstr ""

#: celery.schedules.solar:3 of
msgid ""
"A solar event can be used as the ``run_every`` value of a periodic task "
"entry to schedule based on certain solar events."
msgstr ""

#: celery.schedules.solar:8 of
msgid "Available event valus are:"
msgstr ""

#: celery.schedules.solar:10 of
msgid "``dawn_astronomical``"
msgstr ""

#: celery.schedules.solar:11 of
msgid "``dawn_nautical``"
msgstr ""

#: celery.schedules.solar:12 of
msgid "``dawn_civil``"
msgstr ""

#: celery.schedules.solar:13 of
msgid "``sunrise``"
msgstr ""

#: celery.schedules.solar:14 of
msgid "``solar_noon``"
msgstr ""

#: celery.schedules.solar:15 of
msgid "``sunset``"
msgstr ""

#: celery.schedules.solar:16 of
msgid "``dusk_civil``"
msgstr ""

#: celery.schedules.solar:17 of
msgid "``dusk_nautical``"
msgstr ""

#: celery.schedules.solar:18 of
msgid "``dusk_astronomical``"
msgstr ""

#: celery.schedules.solar:20 of
msgid "Solar event that triggers this task. See note for available values."
msgstr ""

#: celery.schedules.solar:23 of
msgid "The latitude of the observer."
msgstr ""

#: celery.schedules.solar:25 of
msgid "The longitude of the observer."
msgstr ""

#: celery.schedules.solar:27 of
msgid ""
"Function returning the current date and time as a "
"class:`~datetime.datetime`."
msgstr ""

#: celery.schedules.solar.is_due:3 of
msgid "next time to run is in seconds."
msgstr ""

#: celery.schedules.solar.remaining_estimate:1 of
msgid "Return estimate of next time to run."
msgstr ""

#: celery.schedules.solar.remaining_estimate of
msgid "Returns"
msgstr ""

#: celery.schedules.solar.remaining_estimate:3 of
msgid ""
"when the periodic task should     run next, or if it shouldn't run today "
"(e.g., the sun does     not rise today), returns the time when the next "
"check     should take place."
msgstr ""

#: celery.schedules.solar.remaining_estimate:7 of
msgid "when the periodic task should"
msgstr ""

#: celery.schedules.solar.remaining_estimate:6 of
msgid ""
"run next, or if it shouldn't run today (e.g., the sun does not rise "
"today), returns the time when the next check should take place."
msgstr ""

#: celery.schedules.solar.remaining_estimate of
msgid "Return type"
msgstr ""

