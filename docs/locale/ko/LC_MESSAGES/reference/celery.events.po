# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../reference/celery.events.rst:3
msgid "``celery.events``"
msgstr ""

#: celery.events:1 of
msgid "Monitoring Event Receiver+Dispatcher."
msgstr ""

#: celery.events:3 of
msgid ""
"Events is a stream of messages sent for certain actions occurring in the "
"worker (and clients if :setting:`task_send_sent_event` is enabled), used "
"for monitoring purposes."
msgstr ""

#: celery.events.Event:1 of
msgid "Create an event."
msgstr ""

#: celery.events.Event:4 of
msgid "Notes"
msgstr ""

#: celery.events.Event:5 of
msgid ""
"An event is simply a dictionary: the only required field is ``type``. A "
"``timestamp`` field will be set to the current time if not provided."
msgstr ""

#: celery.events.EventDispatcher:1 of
msgid "Dispatches event messages."
msgstr ""

#: celery.events.EventDispatcher celery.events.EventDispatcher.publish
#: celery.events.EventDispatcher.send celery.events.EventReceiver
#: celery.events.get_exchange of
msgid "Parameters"
msgstr ""

#: celery.events.EventDispatcher:3 celery.events.EventReceiver:3 of
msgid "Connection to the broker."
msgstr ""

#: celery.events.EventDispatcher:5 of
msgid ""
"Hostname to identify ourselves as, by default uses the hostname returned "
"by :func:`~celery.utils.anon_nodename`."
msgstr ""

#: celery.events.EventDispatcher:9 of
msgid ""
"List of groups to send events for. :meth:`send` will ignore send requests"
" to groups not in this list. If this is :const:`None`, all events will be"
" sent. Example groups include ``\"task\"`` and ``\"worker\"``."
msgstr ""

#: celery.events.EventDispatcher:14 of
msgid ""
"Set to :const:`False` to not actually publish any events, making "
":meth:`send` a no-op."
msgstr ""

#: celery.events.EventDispatcher:17 of
msgid ""
"Can be used instead of `connection` to specify an exact channel to use "
"when sending events."
msgstr ""

#: celery.events.EventDispatcher:20 of
msgid ""
"If enabled events will be buffered while the connection is down. "
":meth:`flush` must be called as soon as the connection is re-established."
msgstr ""

#: celery.events.EventDispatcher:25 of
msgid "You need to :meth:`close` this after use."
msgstr ""

#: celery.events.EventDispatcher.close:1 of
msgid "Close the event dispatcher."
msgstr ""

#: celery.events.EventDispatcher.extend_buffer:1 of
msgid "Copy the outbound buffer of another instance."
msgstr ""

#: celery.events.EventDispatcher.flush:1 of
msgid "Flush the outbound buffer."
msgstr ""

#: celery.events.EventDispatcher.publish:1 of
msgid "Publish event using custom :class:`~kombu.Producer`."
msgstr ""

#: celery.events.EventDispatcher.publish:3 of
msgid ""
"Event type name, with group separated by dash (`-`). fields: Dictionary "
"of event fields, must be json serializable."
msgstr ""

#: celery.events.EventDispatcher.publish:6 of
msgid "Producer instance to use: only the ``publish`` method will be called."
msgstr ""

#: celery.events.EventDispatcher.publish:9 celery.events.EventDispatcher.send:5
#: of
msgid "Retry in the event of connection failure."
msgstr ""

#: celery.events.EventDispatcher.publish:11
#: celery.events.EventDispatcher.send:7 of
msgid "Map of custom retry policy options. See :meth:`~kombu.Connection.ensure`."
msgstr ""

#: celery.events.EventDispatcher.publish:14
#: celery.events.EventDispatcher.send:10 of
msgid ""
"Don't set logical clock value (also don't forward the internal logical "
"clock)."
msgstr ""

#: celery.events.EventDispatcher.publish:17 of
msgid "Event type used to create event. Defaults to :func:`Event`."
msgstr ""

#: celery.events.EventDispatcher.publish:20 of
msgid "Function returning the current utc offset in hours."
msgstr ""

#: celery.events.EventDispatcher.send:1 of
msgid "Send event."
msgstr ""

#: celery.events.EventDispatcher.send:3 of
msgid "Event type name, with group separated by dash (`-`)."
msgstr ""

#: celery.events.EventDispatcher.send:13 of
msgid "Event type used to create event, defaults to :func:`Event`."
msgstr ""

#: celery.events.EventDispatcher.send:16 of
msgid "unction returning the current utc offset in hours."
msgstr ""

#: celery.events.EventDispatcher.send:19 of
msgid "Event fields -- must be json serializable."
msgstr ""

#: celery.events.EventReceiver:1 of
msgid "Capture events."
msgstr ""

#: celery.events.EventReceiver:5 of
msgid ""
"Event handlers. This is  a map of event type names and their handlers. "
"The special handler `\"*\"` captures all events that don't have a "
"handler."
msgstr ""

#: celery.events.EventReceiver.capture:1 of
msgid "Open up a consumer capturing events."
msgstr ""

#: celery.events.EventReceiver.capture:3 of
msgid ""
"This has to run in the main process, and it will never stop unless "
":attr:`EventDispatcher.should_stop` is set to True, or forced via "
":exc:`KeyboardInterrupt` or :exc:`SystemExit`."
msgstr ""

#: celery.events.EventReceiver.process:1 of
msgid "Process event by dispatching to configured handler."
msgstr ""

#: celery.events.get_exchange:1 of
msgid "Get exchange used for sending events."
msgstr ""

#: celery.events.get_exchange:3 of
msgid "Connection used for sending/receving events."
msgstr ""

#: celery.events.get_exchange:5 of
msgid "Name of the exchange. Default is ``celeryev``."
msgstr ""

#: celery.events.get_exchange:10 of
msgid ""
"The event type changes if Redis is used as the transport (from topic -> "
"fanout)."
msgstr ""

#: celery.events.group_from:1 of
msgid "Get the group part of an event type name."
msgstr ""

#: celery.events.group_from:4 of
msgid "Example"
msgstr ""

