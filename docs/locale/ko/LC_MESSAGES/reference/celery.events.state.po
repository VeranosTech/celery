# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../reference/celery.events.state.rst:3
msgid "``celery.events.state``"
msgstr ""

#: celery.events.state:1 of
msgid "In-memory representation of cluster state."
msgstr ""

#: celery.events.state:3 of
msgid ""
"This module implements a data-structure used to keep track of the state "
"of a cluster of workers and the tasks it is working on (by consuming "
"events)."
msgstr ""

#: celery.events.state:7 of
msgid ""
"For every event consumed the state is updated, so the state represents "
"the state of the cluster at the time of the last event."
msgstr ""

#: celery.events.state:11 of
msgid ""
"Snapshots (:mod:`celery.events.snapshot`) can be used to take "
"\"pictures\" of this state at regular intervals to for example, store "
"that in a database."
msgstr ""

#: celery.events.state.State.Worker:1 celery.events.state.Worker:1 of
msgid "Worker State."
msgstr ""

#: celery.events.state.State.Task:1 celery.events.state.Task:1 of
msgid "Task State."
msgstr ""

#: celery.events.state.State.Task.info:1 celery.events.state.Task.info:1 of
msgid "Information about this task suitable for on-screen display."
msgstr ""

#: celery.events.state.Task.merge_rules:1 of
msgid ""
"How to merge out of order events. Disorder is detected by logical "
"ordering (e.g., :event:`task-received` must've happened before a :event"
":`task-failed` event)."
msgstr ""

#: celery.events.state.Task.merge_rules:5 of
msgid ""
"A merge rule consists of a state and a list of fields to keep from that "
"state. ``(RECEIVED, ('name', 'args')``, means the name and args fields "
"are always taken from the RECEIVED state, and any values for these fields"
" received before or after is simply ignored."
msgstr ""

#: celery.events.state.State:1 of
msgid "Records clusters state."
msgstr ""

#: celery.events.state.State.alive_workers:1 of
msgid "Return a list of (seemingly) alive workers."
msgstr ""

#: celery.events.state.State.get_or_create_task:1 of
msgid "Get or create task by uuid."
msgstr ""

#: celery.events.state.State.get_or_create_worker:1 of
msgid "Get or create worker by hostname."
msgstr ""

#: celery.events.state.State.get_or_create_worker of
msgid "Returns"
msgstr ""

#: celery.events.state.State.get_or_create_worker:3 of
msgid "of ``(worker, was_created)`` pairs."
msgstr ""

#: celery.events.state.State.get_or_create_worker of
msgid "Return type"
msgstr ""

#: celery.events.state.State.task_event:1
#: celery.events.state.State.worker_event:1 of
msgid "Deprecated, use :meth:`event`."
msgstr ""

#: celery.events.state.State.task_types:1 of
msgid "Return a list of all seen task types."
msgstr ""

#: celery.events.state.State.tasks_by_time:1
#: celery.events.state.State.tasks_by_timestamp:1 of
msgid "Generator yielding tasks ordered by time."
msgstr ""

#: celery.events.state.State.tasks_by_time
#: celery.events.state.State.tasks_by_timestamp of
msgid "Yields"
msgstr ""

#: celery.events.state.State.tasks_by_time:3
#: celery.events.state.State.tasks_by_timestamp:3 of
msgid "Tuples of ``(uuid, Task)``."
msgstr ""

#: celery.events.state.heartbeat_expires:1 of
msgid "Return time when heartbeat expires."
msgstr ""

