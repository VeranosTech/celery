# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../internals/reference/celery.utils.time.rst:3
msgid "``celery.utils.time``"
msgstr ""

#: celery.utils.time:1 of
msgid "Utilities related to dates, times, intervals, and timezones."
msgstr ""

#: celery.utils.time.LocalTimezone:1 of
msgid "Local time implementation."
msgstr ""

#: celery.utils.time.LocalTimezone:3 of
msgid "Used only when the :setting:`enable_utc` setting is disabled."
msgstr ""

#: celery.utils.time.LocalTimezone.dst:1 of
msgid "datetime -> DST offset in minutes east of UTC."
msgstr ""

#: celery.utils.time.LocalTimezone.fromutc:1 of
msgid "datetime in UTC -> datetime in local time."
msgstr ""

#: celery.utils.time.LocalTimezone.tzname:1 of
msgid "datetime -> string name of time zone."
msgstr ""

#: celery.utils.time.LocalTimezone.utcoffset:1 of
msgid ""
"datetime -> timedelta showing offset from UTC, negative values indicating"
" West of UTC"
msgstr ""

#: celery.utils.time.maybe_timedelta:1 of
msgid "Convert integer to timedelta, if argument is an integer."
msgstr ""

#: celery.utils.time.delta_resolution:1 of
msgid "Round a :class:`~datetime.datetime` to the resolution of timedelta."
msgstr ""

#: celery.utils.time.delta_resolution:3 of
msgid ""
"If the :class:`~datetime.timedelta` is in days, the "
":class:`~datetime.datetime` will be rounded to the nearest days, if the "
":class:`~datetime.timedelta` is in hours the :class:`~datetime.datetime` "
"will be rounded to the nearest hour, and so on until seconds, which will "
"just return the original :class:`~datetime.datetime`."
msgstr ""

#: celery.utils.time.remaining:1 of
msgid "Calculate the remaining time for a start date and a timedelta."
msgstr ""

#: celery.utils.time.remaining:3 of
msgid "For example, \"how many seconds left for 30 seconds after start?\""
msgstr ""

#: celery.utils.time.humanize_seconds celery.utils.time.remaining of
msgid "Parameters"
msgstr ""

#: celery.utils.time.remaining:5 of
msgid "Starting date."
msgstr ""

#: celery.utils.time.remaining:7 of
msgid "The end delta."
msgstr ""

#: celery.utils.time.remaining:9 of
msgid ""
"If enabled the end time will be calculated using :func:`delta_resolution`"
" (i.e., rounded to the resolution of `ends_in`)."
msgstr ""

#: celery.utils.time.remaining:13 of
msgid ""
"Function returning the current time and date. Defaults to "
":func:`datetime.utcnow`."
msgstr ""

#: celery.utils.time.remaining of
msgid "Returns"
msgstr ""

#: celery.utils.time.remaining:17 of
msgid "Remaining time."
msgstr ""

#: celery.utils.time.remaining of
msgid "Return type"
msgstr ""

#: celery.utils.time.rate:1 of
msgid "Convert rate string (`\"100/m\"`, `\"2/h\"` or `\"0.5/s\"`) to seconds."
msgstr ""

#: celery.utils.time.weekday:1 of
msgid "Return the position of a weekday: 0 - 7, where 0 is Sunday."
msgstr ""

#: celery.utils.time.weekday:4 of
msgid "Example"
msgstr ""

#: celery.utils.time.humanize_seconds:1 of
msgid "Show seconds in human form."
msgstr ""

#: celery.utils.time.humanize_seconds:3 of
msgid "For example, 60 becomes \"1 minute\", and 7200 becomes \"2 hours\"."
msgstr ""

#: celery.utils.time.humanize_seconds:5 of
msgid ""
"can be used to add a preposition to the output (e.g., 'in' will give 'in "
"1 second', but add nothing to 'now')."
msgstr ""

#: celery.utils.time.humanize_seconds:8 of
msgid "Literal 'now'."
msgstr ""

#: celery.utils.time.humanize_seconds:10 of
msgid "Include microseconds."
msgstr ""

#: celery.utils.time.maybe_iso8601:1 of
msgid "Either ``datetime | str -> datetime`` or ``None -> None``."
msgstr ""

#: celery.utils.time.is_naive:1 of
msgid "Return :const:`True` if :class:`~datetime.datetime` is naive."
msgstr ""

#: celery.utils.time.make_aware:1 of
msgid "Set timezone for a :class:`~datetime.datetime` object."
msgstr ""

#: celery.utils.time.localize:1 of
msgid "Convert aware :class:`~datetime.datetime` to another timezone."
msgstr ""

#: celery.utils.time.to_utc:1 of
msgid "Convert naive :class:`~datetime.datetime` to UTC."
msgstr ""

#: celery.utils.time.maybe_make_aware:1 of
msgid "Convert dt to aware datetime, do nothing if dt is already aware."
msgstr ""

#: celery.utils.time.ffwd:1 of
msgid "Version of ``dateutil.relativedelta`` that only supports addition."
msgstr ""

#: celery.utils.time.utcoffset:1 of
msgid "Return the current offset to UTC in hours."
msgstr ""

#: celery.utils.time.adjust_timestamp:1 of
msgid "Adjust timestamp based on provided utcoffset."
msgstr ""

#: celery.utils.time.get_exponential_backoff_interval:1 of
msgid "Calculate the exponential backoff wait time."
msgstr ""

