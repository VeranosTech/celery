# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../userguide/testing.rst:5
msgid "Testing with Celery"
msgstr ""

#: ../userguide/testing.rst:8
msgid "Tasks and unit tests"
msgstr ""

#: ../userguide/testing.rst:10
msgid "To test task behavior in unit tests the preferred method is mocking."
msgstr ""

#: ../userguide/testing.rst:12
msgid "Eager mode"
msgstr ""

#: ../userguide/testing.rst:14
msgid ""
"The eager mode enabled by the :setting:`task_always_eager` setting is by "
"definition not suitable for unit tests."
msgstr ""

#: ../userguide/testing.rst:17
msgid ""
"When testing with eager mode you are only testing an emulation of what "
"happens in a worker, and there are many discrepancies between the "
"emulation and what happens in reality."
msgstr ""

#: ../userguide/testing.rst:21
msgid ""
"A Celery task is much like a web view, in that it should only define how "
"to perform the action in the context of being called as a task."
msgstr ""

#: ../userguide/testing.rst:24
msgid ""
"This means optimally tasks only handle things like serialization, message"
" headers, retries, and so on, with the actual logic implemented "
"elsewhere."
msgstr ""

#: ../userguide/testing.rst:27
msgid "Say we had a task like this:"
msgstr ""

#: ../userguide/testing.rst:47
msgid ""
"You could write unit tests for this task, using mocking like in this "
"example:"
msgstr ""

#: ../userguide/testing.rst:88
msgid "Py.test"
msgstr ""

#: ../userguide/testing.rst:92
msgid ""
"Celery is also a :pypi:`pytest` plugin that adds fixtures that you can "
"use in your integration (or unit) test suites."
msgstr ""

#: ../userguide/testing.rst:97
msgid "Marks"
msgstr ""

#: ../userguide/testing.rst:100
msgid "``celery`` - Set test app configuration."
msgstr ""

#: ../userguide/testing.rst:102
msgid ""
"The ``celery`` mark enables you to override the configuration used for a "
"single test case:"
msgstr ""

#: ../userguide/testing.rst:112
msgid "or for all the test cases in a class:"
msgstr ""

#: ../userguide/testing.rst:126
msgid "Fixtures"
msgstr ""

#: ../userguide/testing.rst:129
msgid "Function scope"
msgstr ""

#: ../userguide/testing.rst:132
msgid "``celery_app`` - Celery app used for testing."
msgstr ""

#: ../userguide/testing.rst:134
msgid "This fixture returns a Celery app you can use for testing."
msgstr ""

#: ../userguide/testing.rst:136 ../userguide/testing.rst:154
#: ../userguide/testing.rst:186 ../userguide/testing.rst:208
#: ../userguide/testing.rst:230 ../userguide/testing.rst:247
#: ../userguide/testing.rst:262 ../userguide/testing.rst:278
#: ../userguide/testing.rst:297 ../userguide/testing.rst:330
msgid "Example:"
msgstr ""

#: ../userguide/testing.rst:148
msgid "``celery_worker`` - Embed live worker."
msgstr ""

#: ../userguide/testing.rst:150
msgid ""
"This fixture starts a Celery worker instance that you can use for "
"integration tests.  The worker will be started in a *separate thread* and"
" will be shutdown as soon as the test returns."
msgstr ""

#: ../userguide/testing.rst:177
msgid "Session scope"
msgstr ""

#: ../userguide/testing.rst:180
msgid "``celery_config`` - Override to setup Celery test app configuration."
msgstr ""

#: ../userguide/testing.rst:181
msgid "You can redefine this fixture to configure the test Celery app."
msgstr ""

#: ../userguide/testing.rst:183 ../userguide/testing.rst:205
msgid ""
"The config returned by your fixture will then be used to configure the "
":func:`celery_app`, and :func:`celery_session_app` fixtures."
msgstr ""

#: ../userguide/testing.rst:199
msgid "``celery_parameters`` - Override to setup Celery test app parameters."
msgstr ""

#: ../userguide/testing.rst:201
msgid ""
"You can redefine this fixture to change the ``__init__`` parameters of "
"test Celery app. In contrast to :func:`celery_config`, these are directly"
" passed to when instantiating :class:`~celery.Celery`."
msgstr ""

#: ../userguide/testing.rst:220
msgid "``celery_worker_parameters`` - Override to setup Celery worker parameters."
msgstr ""

#: ../userguide/testing.rst:222
msgid ""
"You can redefine this fixture to change the ``__init__`` parameters of "
"test Celery workers. These are directly passed to "
":class:`~celery.worker.WorkController` when it is instantiated."
msgstr ""

#: ../userguide/testing.rst:226
msgid ""
"The config returned by your fixture will then be used to configure the "
":func:`celery_worker`, and :func:`celery_session_worker` fixtures."
msgstr ""

#: ../userguide/testing.rst:243
msgid ""
"``celery_enable_logging`` - Override to enable logging in embedded "
"workers."
msgstr ""

#: ../userguide/testing.rst:245
msgid "This is a fixture you can override to enable logging in embedded workers."
msgstr ""

#: ../userguide/testing.rst:256
msgid "``celery_includes`` - Add additional imports for embedded workers."
msgstr ""

#: ../userguide/testing.rst:257
msgid ""
"You can override fixture to include modules when an embedded worker "
"starts."
msgstr ""

#: ../userguide/testing.rst:259
msgid ""
"You can have this return a list of module names to import, which can be "
"task modules, modules registering signals, and so on."
msgstr ""

#: ../userguide/testing.rst:274
msgid "``celery_worker_pool`` - Override the pool used for embedded workers."
msgstr ""

#: ../userguide/testing.rst:275
msgid ""
"You can override fixture to configure the execution pool used for "
"embedded workers."
msgstr ""

#: ../userguide/testing.rst:288
msgid ""
"You cannot use the gevent/eventlet pools, that is unless your whole test "
"suite is running with the monkeypatches enabled."
msgstr ""

#: ../userguide/testing.rst:292
msgid ""
"``celery_session_worker`` - Embedded worker that lives throughout the "
"session."
msgstr ""

#: ../userguide/testing.rst:294
msgid ""
"This fixture starts a worker that lives throughout the testing session "
"(it won't be started/stopped for every test)."
msgstr ""

#: ../userguide/testing.rst:315
msgid "It's probably a bad idea to mix session and ephemeral workers..."
msgstr ""

#: ../userguide/testing.rst:318
msgid "``celery_session_app`` - Celery app used for testing (session scope)."
msgstr ""

#: ../userguide/testing.rst:320
msgid ""
"This can be used by other session scoped fixtures when they need to refer"
" to a Celery app instance."
msgstr ""

#: ../userguide/testing.rst:324
msgid "``use_celery_app_trap`` - Raise exception on falling back to default app."
msgstr ""

#: ../userguide/testing.rst:326
msgid ""
"This is a fixture you can override in your ``conftest.py``, to enable the"
" \"app trap\": if something tries to access the default or current_app, "
"an exception is raised."
msgstr ""

#: ../userguide/testing.rst:339
msgid ""
"If a test wants to access the default app, you would have to mark it "
"using the ``depends_on_current_app`` fixture:"
msgstr ""

