# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../userguide/security.rst:5
msgid "Security"
msgstr ""

#: ../userguide/security.rst:11
msgid "Introduction"
msgstr ""

#: ../userguide/security.rst:13
msgid ""
"While Celery is written with security in mind, it should be treated as an"
" unsafe component."
msgstr ""

#: ../userguide/security.rst:16
msgid ""
"Depending on your `Security Policy`_, there are various steps you can "
"take to make your Celery installation more secure."
msgstr ""

#: ../userguide/security.rst:24
msgid "Areas of Concern"
msgstr ""

#: ../userguide/security.rst:27
msgid "Broker"
msgstr ""

#: ../userguide/security.rst:29
msgid ""
"It's imperative that the broker is guarded from unwanted access, "
"especially if accessible to the public. By default, workers trust that "
"the data they get from the broker hasn't been tampered with. See `Message"
" Signing`_ for information on how to make the broker connection more "
"trustworthy."
msgstr ""

#: ../userguide/security.rst:35
msgid ""
"The first line of defense should be to put a firewall in front of the "
"broker, allowing only white-listed machines to access it."
msgstr ""

#: ../userguide/security.rst:38
msgid ""
"Keep in mind that both firewall misconfiguration, and temporarily "
"disabling the firewall, is common in the real world. Solid security "
"policy includes monitoring of firewall equipment to detect if they've "
"been disabled, be it accidentally or on purpose."
msgstr ""

#: ../userguide/security.rst:43
msgid "In other words, one shouldn't blindly trust the firewall either."
msgstr ""

#: ../userguide/security.rst:45
msgid ""
"If your broker supports fine-grained access control, like RabbitMQ, this "
"is something you should look at enabling. See for example "
"http://www.rabbitmq.com/access-control.html."
msgstr ""

#: ../userguide/security.rst:49
msgid ""
"If supported by your broker backend, you can enable end-to-end SSL "
"encryption and authentication using :setting:`broker_use_ssl`."
msgstr ""

#: ../userguide/security.rst:53
msgid "Client"
msgstr ""

#: ../userguide/security.rst:55
msgid ""
"In Celery, \"client\" refers to anything that sends messages to the "
"broker, for example web-servers that apply tasks."
msgstr ""

#: ../userguide/security.rst:58
msgid ""
"Having the broker properly secured doesn't matter if arbitrary messages "
"can be sent through a client."
msgstr ""

#: ../userguide/security.rst:61
msgid "*[Need more text here]*"
msgstr ""

#: ../userguide/security.rst:64
msgid "Worker"
msgstr ""

#: ../userguide/security.rst:66
msgid ""
"The default permissions of tasks running inside a worker are the same "
"ones as the privileges of the worker itself. This applies to resources, "
"such as; memory, file-systems, and devices."
msgstr ""

#: ../userguide/security.rst:70
msgid ""
"An exception to this rule is when using the multiprocessing based task "
"pool, which is currently the default. In this case, the task will have "
"access to any memory copied as a result of the :func:`fork` call, and "
"access to memory contents written by parent tasks in the same worker "
"child process."
msgstr ""

#: ../userguide/security.rst:76
msgid ""
"Limiting access to memory contents can be done by launching every task in"
" a subprocess (:func:`fork` + :func:`execve`)."
msgstr ""

#: ../userguide/security.rst:79
msgid ""
"Limiting file-system and device access can be accomplished by using "
"`chroot`_, `jail`_, `sandboxing`_, virtual machines, or other mechanisms "
"as enabled by the platform or additional software."
msgstr ""

#: ../userguide/security.rst:83
msgid ""
"Note also that any task executed in the worker will have the same network"
" access as the machine on which it's running. If the worker is located on"
" an internal network it's recommended to add firewall rules for outbound "
"traffic."
msgstr ""

#: ../userguide/security.rst:96
msgid "Serializers"
msgstr ""

#: ../userguide/security.rst:98
msgid ""
"The default serializer is JSON since version 4.0, but since it has only "
"support for a restricted set of types you may want to consider using "
"pickle for serialization instead."
msgstr ""

#: ../userguide/security.rst:102
msgid ""
"The `pickle` serializer is convenient as it can serialize almost any "
"Python object, even functions with some work, but for the same reasons "
"`pickle` is inherently insecure [*]_, and should be avoided whenever "
"clients are untrusted or unauthenticated."
msgstr ""

#: ../userguide/security.rst:108
msgid ""
"You can disable untrusted content by specifying a white-list of accepted "
"content-types in the :setting:`accept_content` setting:"
msgstr ""

#: ../userguide/security.rst:116
msgid ""
"This setting was first supported in version 3.0.18. If you're running an "
"earlier version it will simply be ignored, so make sure you're running a "
"version that supports it."
msgstr ""

#: ../userguide/security.rst:125
msgid ""
"This accepts a list of serializer names and content-types, so you could "
"also specify the content type for json:"
msgstr ""

#: ../userguide/security.rst:132
msgid ""
"Celery also comes with a special `auth` serializer that validates "
"communication between Celery clients and workers, making sure that "
"messages originates from trusted sources. Using `Public-key cryptography`"
" the `auth` serializer can verify the authenticity of senders, to enable "
"this read :ref:`message-signing` for more information."
msgstr ""

#: ../userguide/security.rst:145
msgid "Message Signing"
msgstr ""

#: ../userguide/security.rst:147
msgid ""
"Celery can use the :pypi:`cryptography` library to sign message using "
"`Public-key cryptography`, where messages sent by clients are signed "
"using a private key and then later verified by the worker using a public "
"certificate."
msgstr ""

#: ../userguide/security.rst:152
msgid ""
"Optimally certificates should be signed by an official `Certificate "
"Authority`_, but they can also be self-signed."
msgstr ""

#: ../userguide/security.rst:155
msgid ""
"To enable this you should configure the :setting:`task_serializer` "
"setting to use the `auth` serializer. Enforcing the workers to only "
"accept signed messages, you should set `accept_content` to `['auth']`. "
"For additional signing of the event protocol, set `event_serializer` to "
"`auth`. Also required is configuring the paths used to locate private "
"keys and certificates on the file-system: the :setting:`security_key`, "
":setting:`security_certificate`, and :setting:`security_cert_store` "
"settings respectively. You can tweak the signing algorithm with "
":setting:`security_digest`."
msgstr ""

#: ../userguide/security.rst:166
msgid ""
"With these configured it's also necessary to call the "
":func:`celery.setup_security` function. Note that this will also disable "
"all insecure serializers so that the worker won't accept messages with "
"untrusted content types."
msgstr ""

#: ../userguide/security.rst:171
msgid ""
"This is an example configuration using the `auth` serializer, with the "
"private key and certificate files located in `/etc/ssl`."
msgstr ""

#: ../userguide/security.rst:190
msgid ""
"While relative paths aren't disallowed, using absolute paths is "
"recommended for these files."
msgstr ""

#: ../userguide/security.rst:193
msgid ""
"Also note that the `auth` serializer won't encrypt the contents of a "
"message, so if needed this will have to be enabled separately."
msgstr ""

#: ../userguide/security.rst:201
msgid "Intrusion Detection"
msgstr ""

#: ../userguide/security.rst:203
msgid ""
"The most important part when defending your systems against intruders is "
"being able to detect if the system has been compromised."
msgstr ""

#: ../userguide/security.rst:207
msgid "Logs"
msgstr ""

#: ../userguide/security.rst:209
msgid ""
"Logs are usually the first place to look for evidence of security "
"breaches, but they're useless if they can be tampered with."
msgstr ""

#: ../userguide/security.rst:212
msgid ""
"A good solution is to set up centralized logging with a dedicated logging"
" server. Access to it should be restricted. In addition to having all of "
"the logs in a single place, if configured correctly, it can make it "
"harder for intruders to tamper with your logs."
msgstr ""

#: ../userguide/security.rst:217
msgid ""
"This should be fairly easy to setup using syslog (see also `syslog-ng`_ "
"and `rsyslog`_). Celery uses the :mod:`logging` library, and already has "
"support for using syslog."
msgstr ""

#: ../userguide/security.rst:221
msgid ""
"A tip for the paranoid is to send logs using UDP and cut the transmit "
"part of the logging server's network cable :-)"
msgstr ""

#: ../userguide/security.rst:228
msgid "Tripwire"
msgstr ""

#: ../userguide/security.rst:230
msgid ""
"`Tripwire`_ is a (now commercial) data integrity tool, with several open "
"source implementations, used to keep cryptographic hashes of files in the"
" file-system, so that administrators can be alerted when they change. "
"This way when the damage is done and your system has been compromised you"
" can tell exactly what files intruders have changed  (password files, "
"logs, back-doors, root-kits, and so on). Often this is the only way "
"you'll be able to detect an intrusion."
msgstr ""

#: ../userguide/security.rst:238
msgid "Some open source implementations include:"
msgstr ""

#: ../userguide/security.rst:240
msgid "`OSSEC`_"
msgstr ""

#: ../userguide/security.rst:241
msgid "`Samhain`_"
msgstr ""

#: ../userguide/security.rst:242
msgid "`Open Source Tripwire`_"
msgstr ""

#: ../userguide/security.rst:243
msgid "`AIDE`_"
msgstr ""

#: ../userguide/security.rst:245
msgid ""
"Also, the `ZFS`_ file-system comes with built-in integrity checks that "
"can be used."
msgstr ""

#: ../userguide/security.rst:256
msgid "Footnotes"
msgstr ""

#: ../userguide/security.rst:257
msgid "https://blog.nelhage.com/2011/03/exploiting-pickle/"
msgstr ""

