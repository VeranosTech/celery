# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../userguide/concurrency/eventlet.rst:5
msgid "Concurrency with Eventlet"
msgstr ""

#: ../userguide/concurrency/eventlet.rst:10
msgid "Introduction"
msgstr ""

#: ../userguide/concurrency/eventlet.rst:12
msgid ""
"The `Eventlet`_ homepage describes it as a concurrent networking library "
"for Python that allows you to change how you run your code, not how you "
"write it."
msgstr ""

#: ../userguide/concurrency/eventlet.rst:16
msgid ""
"It uses `epoll(4)`_ or `libevent`_ for `highly scalable non-blocking "
"I/O`_."
msgstr ""

#: ../userguide/concurrency/eventlet.rst:18
msgid ""
"`Coroutines`_ ensure that the developer uses a blocking style of "
"programming that's similar to threading, but provide the benefits of non-"
"blocking I/O."
msgstr ""

#: ../userguide/concurrency/eventlet.rst:21
msgid ""
"The event dispatch is implicit: meaning you can easily use Eventlet from "
"the Python interpreter, or as a small part of a larger application."
msgstr ""

#: ../userguide/concurrency/eventlet.rst:25
msgid ""
"Celery supports Eventlet as an alternative execution pool implementation "
"and in some cases superior to prefork. However, you need to ensure one "
"task doesn't block the event loop too long. Generally, CPU-bound "
"operations don't go well with Evenetlet. Also note that some libraries, "
"usually with C extensions, cannot be monkeypatched and therefore cannot "
"benefit from using Eventlet. Please refer to their documentation if you "
"are not sure. For example, pylibmc does not allow cooperation with "
"Eventlet but psycopg2 does when both of them are libraries with C "
"extensions."
msgstr ""

#: ../userguide/concurrency/eventlet.rst:35
msgid ""
"The prefork pool can take use of multiple processes, but how many is "
"often limited to a few processes per CPU. With Eventlet you can "
"efficiently spawn hundreds, or thousands of green threads. In an informal"
" test with a feed hub system the Eventlet pool could fetch and process "
"hundreds of feeds every second, while the prefork pool spent 14 seconds "
"processing 100 feeds. Note that this is one of the applications async I/O"
" is especially good at (asynchronous HTTP requests). You may want a mix "
"of both Eventlet and prefork workers, and route tasks according to "
"compatibility or what works best."
msgstr ""

#: ../userguide/concurrency/eventlet.rst:46
msgid "Enabling Eventlet"
msgstr ""

#: ../userguide/concurrency/eventlet.rst:48
msgid ""
"You can enable the Eventlet pool by using the :option:`celery worker -P` "
"worker option."
msgstr ""

#: ../userguide/concurrency/eventlet.rst:58
msgid "Examples"
msgstr ""

#: ../userguide/concurrency/eventlet.rst:60
msgid ""
"See the `Eventlet examples`_ directory in the Celery distribution for "
"some examples taking use of Eventlet support."
msgstr ""

