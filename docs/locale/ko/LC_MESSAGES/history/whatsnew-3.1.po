# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2018, Ask Solem & contributors
# This file is distributed under the same license as the Celery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Celery 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-22 13:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../history/whatsnew-3.1.rst:5
msgid "What's new in Celery 3.1 (Cipater)"
msgstr ""

#: ../history/whatsnew-3.1.rst
msgid "Author"
msgstr ""

#: ../history/whatsnew-3.1.rst:6
msgid "Ask Solem (``ask at celeryproject.org``)"
msgstr ""

msgid "Change history"
msgstr ""

#: ../history/whatsnew-3.1.rst:10
msgid ""
"What's new documents describe the changes in major versions, we also have"
" a :ref:`changelog` that lists the changes in bugfix releases (0.0.x), "
"while older series are archived under the :ref:`history` section."
msgstr ""

#: ../history/whatsnew-3.1.rst:15
msgid ""
"Celery is a simple, flexible, and reliable distributed system to process "
"vast amounts of messages, while providing operations with the tools "
"required to maintain such a system."
msgstr ""

#: ../history/whatsnew-3.1.rst:19
msgid ""
"It's a task queue with focus on real-time processing, while also "
"supporting task scheduling."
msgstr ""

#: ../history/whatsnew-3.1.rst:22
msgid ""
"Celery has a large and diverse community of users and contributors, you "
"should come join us :ref:`on IRC <irc-channel>` or :ref:`our mailing-list"
" <mailing-list>`."
msgstr ""

#: ../history/whatsnew-3.1.rst:26
msgid ""
"To read more about Celery you should go read the :ref:`introduction "
"<intro>`."
msgstr ""

#: ../history/whatsnew-3.1.rst:28
msgid ""
"While this version is backward compatible with previous versions it's "
"important that you read the following section."
msgstr ""

#: ../history/whatsnew-3.1.rst:31
msgid ""
"This version is officially supported on CPython 2.6, 2.7, and 3.3, and "
"also supported on PyPy."
msgstr ""

msgid "Table of Contents"
msgstr ""

#: ../history/whatsnew-3.1.rst:38
msgid "Make sure you read the important notes before upgrading to this version."
msgstr ""

#: ../history/whatsnew-3.1.rst:45
msgid "Preface"
msgstr ""

#: ../history/whatsnew-3.1.rst:47
msgid ""
"Deadlocks have long plagued our workers, and while uncommon they're not "
"acceptable. They're also infamous for being extremely hard to diagnose "
"and reproduce, so to make this job easier I wrote a stress test suite "
"that bombards the worker with different tasks in an attempt to break it."
msgstr ""

#: ../history/whatsnew-3.1.rst:52
msgid ""
"What happens if thousands of worker child processes are killed every "
"second? what if we also kill the broker connection every 10 seconds?  "
"These are examples of what the stress test suite will do to the worker, "
"and it reruns these tests using different configuration combinations to "
"find edge case bugs."
msgstr ""

#: ../history/whatsnew-3.1.rst:58
msgid ""
"The end result was that I had to rewrite the prefork pool to avoid the "
"use of the POSIX semaphore. This was extremely challenging, but after "
"months of hard work the worker now finally passes the stress test suite."
msgstr ""

#: ../history/whatsnew-3.1.rst:62
msgid ""
"There's probably more bugs to find, but the good news is that we now have"
" a tool to reproduce them, so should you be so unlucky to experience a "
"bug then we'll write a test for it and squash it!"
msgstr ""

#: ../history/whatsnew-3.1.rst:66
msgid ""
"Note that I've also moved many broker transports into experimental "
"status: the only transports recommended for production use today is "
"RabbitMQ and Redis."
msgstr ""

#: ../history/whatsnew-3.1.rst:70
msgid ""
"I don't have the resources to maintain all of them, so bugs are left "
"unresolved. I wish that someone will step up and take responsibility for "
"these transports or donate resources to improve them, but  as the "
"situation is now I don't think the quality is up to date with the rest of"
" the code-base so I cannot recommend them for production use."
msgstr ""

#: ../history/whatsnew-3.1.rst:76
msgid ""
"The next version of Celery 4.0 will focus on performance and removing "
"rarely used parts of the library. Work has also started on a new message "
"protocol, supporting multiple languages and more. The initial draft can "
"be found :ref:`here <message-protocol-task-v2>`."
msgstr ""

#: ../history/whatsnew-3.1.rst:81
msgid ""
"This has probably been the hardest release I've worked on, so no "
"introduction to this changelog would be complete without a massive thank "
"you to everyone who contributed and helped me test it!"
msgstr ""

#: ../history/whatsnew-3.1.rst:85
msgid "Thank you for your support!"
msgstr ""

#: ../history/whatsnew-3.1.rst:87
msgid "*â€” Ask Solem*"
msgstr ""

#: ../history/whatsnew-3.1.rst:92
msgid "Important Notes"
msgstr ""

#: ../history/whatsnew-3.1.rst:95
msgid "Dropped support for Python 2.5"
msgstr ""

#: ../history/whatsnew-3.1.rst:97
msgid "Celery now requires Python 2.6 or later."
msgstr ""

#: ../history/whatsnew-3.1.rst:99
msgid ""
"The new dual code base runs on both Python 2 and 3, without requiring the"
" ``2to3`` porting tool."
msgstr ""

#: ../history/whatsnew-3.1.rst:104
msgid ""
"This is also the last version to support Python 2.6! From Celery 4.0 and "
"on-wards Python 2.7 or later will be required."
msgstr ""

#: ../history/whatsnew-3.1.rst:110
msgid "Last version to enable Pickle by default"
msgstr ""

#: ../history/whatsnew-3.1.rst:112
msgid "Starting from Celery 4.0 the default serializer will be json."
msgstr ""

#: ../history/whatsnew-3.1.rst:114
msgid ""
"If you depend on pickle being accepted you should be prepared for this "
"change by explicitly allowing your worker to consume pickled messages "
"using the :setting:`CELERY_ACCEPT_CONTENT` setting:"
msgstr ""

#: ../history/whatsnew-3.1.rst:123
msgid ""
"Make sure you only select the serialization formats you'll actually be "
"using, and make sure you've properly secured your broker from unwanted "
"access (see the :ref:`Security Guide <guide-security>`)."
msgstr ""

#: ../history/whatsnew-3.1.rst:127
msgid ""
"The worker will emit a deprecation warning if you don't define this "
"setting."
msgstr ""

msgid "for Kombu users"
msgstr ""

#: ../history/whatsnew-3.1.rst:131
msgid ""
"Kombu 3.0 no longer accepts pickled messages by default, so if you use "
"Kombu directly then you have to configure your consumers: see the "
":ref:`Kombu 3.0 Changelog <kombu:version-3.0.0>` for more information."
msgstr ""

#: ../history/whatsnew-3.1.rst:137
msgid "Old command-line programs removed and deprecated"
msgstr ""

#: ../history/whatsnew-3.1.rst:139
msgid ""
"Everyone should move to the new :program:`celery` umbrella command, so "
"we're incrementally deprecating the old command names."
msgstr ""

#: ../history/whatsnew-3.1.rst:142
msgid ""
"In this version we've removed all commands that aren't used in init-"
"scripts. The rest will be removed in 4.0."
msgstr ""

#: ../history/whatsnew-3.1.rst:146
msgid "Program"
msgstr ""

#: ../history/whatsnew-3.1.rst:146
msgid "New Status"
msgstr ""

#: ../history/whatsnew-3.1.rst:146
msgid "Replacement"
msgstr ""

#: ../history/whatsnew-3.1.rst:148
msgid "``celeryd``"
msgstr ""

#: ../history/whatsnew-3.1.rst:148 ../history/whatsnew-3.1.rst:150
#: ../history/whatsnew-3.1.rst:152
msgid "*DEPRECATED*"
msgstr ""

#: ../history/whatsnew-3.1.rst:148
msgid ":program:`celery worker`"
msgstr ""

#: ../history/whatsnew-3.1.rst:150
msgid "``celerybeat``"
msgstr ""

#: ../history/whatsnew-3.1.rst:150
msgid ":program:`celery beat`"
msgstr ""

#: ../history/whatsnew-3.1.rst:152
msgid "``celeryd-multi``"
msgstr ""

#: ../history/whatsnew-3.1.rst:152
msgid ":program:`celery multi`"
msgstr ""

#: ../history/whatsnew-3.1.rst:154
msgid "``celeryctl``"
msgstr ""

#: ../history/whatsnew-3.1.rst:154 ../history/whatsnew-3.1.rst:156
#: ../history/whatsnew-3.1.rst:158
msgid "**REMOVED**"
msgstr ""

#: ../history/whatsnew-3.1.rst:154
msgid ":program:`celery inspect|control`"
msgstr ""

#: ../history/whatsnew-3.1.rst:156
msgid "``celeryev``"
msgstr ""

#: ../history/whatsnew-3.1.rst:156
msgid ":program:`celery events`"
msgstr ""

#: ../history/whatsnew-3.1.rst:158
msgid "``camqadm``"
msgstr ""

#: ../history/whatsnew-3.1.rst:158
msgid ":program:`celery amqp`"
msgstr ""

#: ../history/whatsnew-3.1.rst:161
msgid ""
"If this isn't a new installation then you may want to remove the old "
"commands:"
msgstr ""

#: ../history/whatsnew-3.1.rst:172
msgid "Please run :program:`celery --help` for help using the umbrella command."
msgstr ""

#: ../history/whatsnew-3.1.rst:177
msgid "News"
msgstr ""

#: ../history/whatsnew-3.1.rst:180
msgid "Prefork Pool Improvements"
msgstr ""

#: ../history/whatsnew-3.1.rst:182
msgid ""
"These improvements are only active if you use an async capable transport."
" This means only RabbitMQ (AMQP) and Redis are supported at this point "
"and other transports will still use the thread-based fallback "
"implementation."
msgstr ""

#: ../history/whatsnew-3.1.rst:187
msgid "Pool is now using one IPC queue per child process."
msgstr ""

#: ../history/whatsnew-3.1.rst:189
msgid ""
"Previously the pool shared one queue between all child processes, using a"
" POSIX semaphore as a mutex to achieve exclusive read and write access."
msgstr ""

#: ../history/whatsnew-3.1.rst:193
msgid ""
"The POSIX semaphore has now been removed and each child process gets a "
"dedicated queue. This means that the worker will require more file "
"descriptors (two descriptors per process), but it also means that "
"performance is improved and we can send work to individual child "
"processes."
msgstr ""

#: ../history/whatsnew-3.1.rst:199
msgid ""
"POSIX semaphores aren't released when a process is killed, so killing "
"processes could lead to a deadlock if it happened while the semaphore was"
" acquired. There's no good solution to fix this, so the best option was "
"to remove the semaphore."
msgstr ""

#: ../history/whatsnew-3.1.rst:204
msgid "Asynchronous write operations"
msgstr ""

#: ../history/whatsnew-3.1.rst:206
msgid "The pool now uses async I/O to send work to the child processes."
msgstr ""

#: ../history/whatsnew-3.1.rst:208
msgid "Lost process detection is now immediate."
msgstr ""

#: ../history/whatsnew-3.1.rst:210
msgid ""
"If a child process is killed or exits mysteriously the pool previously "
"had to wait for 30 seconds before marking the task with a "
":exc:`~celery.exceptions.WorkerLostError`. It had to do this because the "
"out-queue was shared between all processes, and the pool couldn't be "
"certain whether the process completed the task or not. So an arbitrary "
"timeout of 30 seconds was chosen, as it was believed that the out-queue "
"would've been drained by this point."
msgstr ""

#: ../history/whatsnew-3.1.rst:218
msgid ""
"This timeout is no longer necessary, and so the task can be marked as "
"failed as soon as the pool gets the notification that the process exited."
msgstr ""

#: ../history/whatsnew-3.1.rst:221
msgid "Rare race conditions fixed"
msgstr ""

#: ../history/whatsnew-3.1.rst:223
msgid ""
"Most of these bugs were never reported to us, but were discovered while "
"running the new stress test suite."
msgstr ""

#: ../history/whatsnew-3.1.rst:227
msgid "Caveats"
msgstr ""

msgid "Long running tasks"
msgstr ""

#: ../history/whatsnew-3.1.rst:231
msgid ""
"The new pool will send tasks to a child process as long as the process "
"in-queue is writable, and since the socket is buffered this means that "
"the processes are, in effect, prefetching tasks."
msgstr ""

#: ../history/whatsnew-3.1.rst:235
msgid ""
"This benefits performance but it also means that other tasks may be stuck"
" waiting for a long running task to complete::"
msgstr ""

#: ../history/whatsnew-3.1.rst:248
msgid ""
"The buffer size varies based on the operating system: some may have a "
"buffer as small as 64KB but on recent Linux versions the buffer size is "
"1MB (can only be changed system wide)."
msgstr ""

#: ../history/whatsnew-3.1.rst:252
msgid ""
"You can disable this prefetching behavior by enabling the :option:`-Ofair"
" <celery worker -O>` worker option:"
msgstr ""

#: ../history/whatsnew-3.1.rst:259
msgid ""
"With this option enabled the worker will only write to workers that are "
"available for work, disabling the prefetch behavior."
msgstr ""

msgid "Max tasks per child"
msgstr ""

#: ../history/whatsnew-3.1.rst:264
msgid ""
"If a process exits and pool prefetch is enabled the worker may have "
"already written many tasks to the process in-queue, and these tasks must "
"then be moved back and rewritten to a new process."
msgstr ""

#: ../history/whatsnew-3.1.rst:268
msgid ""
"This is very expensive if you have the :option:`--max-tasks-per-child "
"<celery worker --max-tasks-per-child>` option set to a low value (e.g., "
"less than 10), you should not be using the :option:`-Ofast <celery worker"
" -O>` scheduler option."
msgstr ""

#: ../history/whatsnew-3.1.rst:274
msgid "Django supported out of the box"
msgstr ""

#: ../history/whatsnew-3.1.rst:276
msgid ""
"Celery 3.0 introduced a shiny new API, but unfortunately didn't have a "
"solution for Django users."
msgstr ""

#: ../history/whatsnew-3.1.rst:279
msgid ""
"The situation changes with this version as Django is now supported in "
"core and new Django users coming to Celery are now expected to use the "
"new API directly."
msgstr ""

#: ../history/whatsnew-3.1.rst:283
msgid ""
"The Django community has a convention where there's a separate "
"``django-x`` package for every library, acting like a bridge between "
"Django and the library."
msgstr ""

#: ../history/whatsnew-3.1.rst:287
msgid ""
"Having a separate project for Django users has been a pain for Celery, "
"with multiple issue trackers and multiple documentation sources, and then"
" lastly since 3.0 we even had different APIs."
msgstr ""

#: ../history/whatsnew-3.1.rst:291
msgid ""
"With this version we challenge that convention and Django users will use "
"the same library, the same API and the same documentation as everyone "
"else."
msgstr ""

#: ../history/whatsnew-3.1.rst:295
msgid ""
"There's no rush to port your existing code to use the new API, but if "
"you'd like to experiment with it you should know that:"
msgstr ""

#: ../history/whatsnew-3.1.rst:298
msgid "You need to use a Celery application instance."
msgstr ""

#: ../history/whatsnew-3.1.rst:300
msgid ""
"The new Celery API introduced in 3.0 requires users to instantiate the "
"library by creating an application:"
msgstr ""

#: ../history/whatsnew-3.1.rst:309
msgid "You need to explicitly integrate Celery with Django"
msgstr ""

#: ../history/whatsnew-3.1.rst:311
msgid ""
"Celery won't automatically use the Django settings, so you can either "
"configure Celery separately or you can tell it to use the Django settings"
" with:"
msgstr ""

#: ../history/whatsnew-3.1.rst:319
msgid ""
"Neither will it automatically traverse your installed apps to find task "
"modules. If you want this behavior, you must explicitly pass a list of "
"Django instances to the Celery app:"
msgstr ""

#: ../history/whatsnew-3.1.rst:328
msgid "You no longer use ``manage.py``"
msgstr ""

#: ../history/whatsnew-3.1.rst:330
msgid "Instead you use the :program:`celery` command directly:"
msgstr ""

#: ../history/whatsnew-3.1.rst:336
msgid ""
"For this to work your app module must store the  "
":envvar:`DJANGO_SETTINGS_MODULE` environment variable, see the example in"
" the :ref:`Django guide <django-first-steps>`."
msgstr ""

#: ../history/whatsnew-3.1.rst:340
msgid ""
"To get started with the new API you should first read the :ref:`first-"
"steps` tutorial, and then you should read the Django-specific "
"instructions in :ref:`django-first-steps`."
msgstr ""

#: ../history/whatsnew-3.1.rst:344
msgid ""
"The fixes and improvements applied by the :pypi:`django-celery` library "
"are now automatically applied by core Celery when it detects that the "
":envvar:`DJANGO_SETTINGS_MODULE` environment variable is set."
msgstr ""

#: ../history/whatsnew-3.1.rst:348
msgid ""
"The distribution ships with a new example project using Django in "
":file:`examples/django`:"
msgstr ""

#: ../history/whatsnew-3.1.rst:351
msgid "https://github.com/celery/celery/tree/3.1/examples/django"
msgstr ""

#: ../history/whatsnew-3.1.rst:353
msgid "Some features still require the :pypi:`django-celery` library:"
msgstr ""

#: ../history/whatsnew-3.1.rst:355
msgid "Celery doesn't implement the Django database or cache result backends."
msgstr ""

#: ../history/whatsnew-3.1.rst:357
msgid "Celery doesn't ship with the database-based periodic task"
msgstr ""

#: ../history/whatsnew-3.1.rst:357
msgid "scheduler."
msgstr ""

#: ../history/whatsnew-3.1.rst:361
msgid ""
"If you're still using the old API when you upgrade to Celery 3.1 then you"
" must make sure that your settings module contains the "
"``djcelery.setup_loader()`` line, since this will no longer happen as a "
"side-effect of importing the :pypi:`django-celery` module."
msgstr ""

#: ../history/whatsnew-3.1.rst:367
msgid ""
"New users (or if you've ported to the new API) don't need the "
"``setup_loader`` line anymore, and must make sure to remove it."
msgstr ""

#: ../history/whatsnew-3.1.rst:371
msgid "Events are now ordered using logical time"
msgstr ""

#: ../history/whatsnew-3.1.rst:373
msgid ""
"Keeping physical clocks in perfect sync is impossible, so using time-"
"stamps to order events in a distributed system isn't reliable."
msgstr ""

#: ../history/whatsnew-3.1.rst:376
msgid ""
"Celery event messages have included a logical clock value for some time, "
"but starting with this version that field is also used to order them."
msgstr ""

#: ../history/whatsnew-3.1.rst:379
msgid ""
"Also, events now record timezone information by including a new "
"``utcoffset`` field in the event message. This is a signed integer "
"telling the difference from UTC time in hours, so for example, an event "
"sent from the Europe/London timezone in daylight savings time will have "
"an offset of 1."
msgstr ""

#: ../history/whatsnew-3.1.rst:385
msgid ""
":class:`@events.Receiver` will automatically convert the time-stamps to "
"the local timezone."
msgstr ""

#: ../history/whatsnew-3.1.rst:390
msgid ""
"The logical clock is synchronized with other nodes in the same cluster "
"(neighbors), so this means that the logical epoch will start at the point"
" when the first worker in the cluster starts."
msgstr ""

#: ../history/whatsnew-3.1.rst:395
msgid ""
"If all of the workers are shutdown the clock value will be lost and reset"
" to 0. To protect against this, you should specify the :option:`celery "
"worker --statedb` option such that the worker can persist the clock value"
" at shutdown."
msgstr ""

#: ../history/whatsnew-3.1.rst:400
msgid ""
"You may notice that the logical clock is an integer value and increases "
"very rapidly. Don't worry about the value overflowing though, as even in "
"the most busy clusters it may take several millennium before the clock "
"exceeds a 64 bits value."
msgstr ""

#: ../history/whatsnew-3.1.rst:406
msgid "New worker node name format (``name@host``)"
msgstr ""

#: ../history/whatsnew-3.1.rst:408
msgid ""
"Node names are now constructed by two elements: name and host-name "
"separated by '@'."
msgstr ""

#: ../history/whatsnew-3.1.rst:411
msgid ""
"This change was made to more easily identify multiple instances running "
"on the same machine."
msgstr ""

#: ../history/whatsnew-3.1.rst:414
msgid ""
"If a custom name isn't specified then the worker will use the name "
"'celery' by default, resulting in a fully qualified node name of "
"'celery@hostname':"
msgstr ""

#: ../history/whatsnew-3.1.rst:423
msgid "To also set the name you must include the @:"
msgstr ""

#: ../history/whatsnew-3.1.rst:430
msgid ""
"The worker will identify itself using the fully qualified node name in "
"events and broadcast messages, so where before a worker would identify "
"itself as 'worker1.example.com', it'll now use "
"'celery@worker1.example.com'."
msgstr ""

#: ../history/whatsnew-3.1.rst:435
msgid ""
"Remember that the :option:`-n <celery worker -n>` argument also supports "
"simple variable substitutions, so if the current host-name is "
"*george.example.com* then the ``%h`` macro will expand into that:"
msgstr ""

#: ../history/whatsnew-3.1.rst:444
msgid "The available substitutions are as follows:"
msgstr ""

#: ../history/whatsnew-3.1.rst:447
msgid "Variable"
msgstr ""

#: ../history/whatsnew-3.1.rst:447
msgid "Substitution"
msgstr ""

#: ../history/whatsnew-3.1.rst:449
msgid "``%h``"
msgstr ""

#: ../history/whatsnew-3.1.rst:449
msgid "Full host-name (including domain name)"
msgstr ""

#: ../history/whatsnew-3.1.rst:451
#, python-format
msgid "``%d``"
msgstr ""

#: ../history/whatsnew-3.1.rst:451
msgid "Domain name only"
msgstr ""

#: ../history/whatsnew-3.1.rst:453
msgid "``%n``"
msgstr ""

#: ../history/whatsnew-3.1.rst:453
msgid "Host-name only (without domain name)"
msgstr ""

#: ../history/whatsnew-3.1.rst:455
#, python-format
msgid "``%%``"
msgstr ""

#: ../history/whatsnew-3.1.rst:455
msgid "The character ``%``"
msgstr ""

#: ../history/whatsnew-3.1.rst:459
msgid "Bound tasks"
msgstr ""

#: ../history/whatsnew-3.1.rst:461
msgid ""
"The task decorator can now create \"bound tasks\", which means that the "
"task will receive the ``self`` argument."
msgstr ""

#: ../history/whatsnew-3.1.rst:474
msgid ""
"Using *bound tasks* is now the recommended approach whenever you need "
"access to the task instance or request context. Previously one would've "
"to refer to the name of the task instead (``send_twitter_status.retry``),"
" but this could lead to problems in some configurations."
msgstr ""

#: ../history/whatsnew-3.1.rst:481
msgid "Mingle: Worker synchronization"
msgstr ""

#: ../history/whatsnew-3.1.rst:483
msgid ""
"The worker will now attempt to synchronize with other workers in the same"
" cluster."
msgstr ""

#: ../history/whatsnew-3.1.rst:486
msgid "Synchronized data currently includes revoked tasks and logical clock."
msgstr ""

#: ../history/whatsnew-3.1.rst:488
msgid ""
"This only happens at start-up and causes a one second start-up delay to "
"collect broadcast responses from other workers."
msgstr ""

#: ../history/whatsnew-3.1.rst:491
msgid ""
"You can disable this bootstep using the :option:`celery worker --without-"
"mingle` option."
msgstr ""

#: ../history/whatsnew-3.1.rst:495
msgid "Gossip: Worker <-> Worker communication"
msgstr ""

#: ../history/whatsnew-3.1.rst:497
msgid ""
"Workers are now passively subscribing to worker related events like "
"heartbeats."
msgstr ""

#: ../history/whatsnew-3.1.rst:500
msgid ""
"This means that a worker knows what other workers are doing and can "
"detect if they go offline. Currently this is only used for clock "
"synchronization, but there are many possibilities for future additions "
"and you can write extensions that take advantage of this already."
msgstr ""

#: ../history/whatsnew-3.1.rst:505
msgid ""
"Some ideas include consensus protocols, reroute task to best worker "
"(based on resource usage or data locality) or restarting workers when "
"they crash."
msgstr ""

#: ../history/whatsnew-3.1.rst:508
msgid ""
"We believe that although this is a small addition, it opens amazing "
"possibilities."
msgstr ""

#: ../history/whatsnew-3.1.rst:511
msgid ""
"You can disable this bootstep using the :option:`celery worker --without-"
"gossip` option."
msgstr ""

#: ../history/whatsnew-3.1.rst:515
msgid "Bootsteps: Extending the worker"
msgstr ""

#: ../history/whatsnew-3.1.rst:517
msgid ""
"By writing bootsteps you can now easily extend the consumer part of the "
"worker to add additional features, like custom message consumers."
msgstr ""

#: ../history/whatsnew-3.1.rst:520
msgid ""
"The worker has been using bootsteps for some time, but these were never "
"documented. In this version the consumer part of the worker has also been"
" rewritten to use bootsteps and the new :ref:`guide-extending` guide "
"documents examples extending the worker, including adding custom message "
"consumers."
msgstr ""

#: ../history/whatsnew-3.1.rst:526 ../history/whatsnew-3.1.rst:740
msgid "See the :ref:`guide-extending` guide for more information."
msgstr ""

#: ../history/whatsnew-3.1.rst:530
msgid ""
"Bootsteps written for older versions won't be compatible with this "
"version, as the API has changed significantly."
msgstr ""

#: ../history/whatsnew-3.1.rst:533
msgid ""
"The old API was experimental and internal but should you be so unlucky to"
" use it then please contact the mailing-list and we'll help you port the "
"bootstep to the new API."
msgstr ""

#: ../history/whatsnew-3.1.rst:538
msgid "New RPC result backend"
msgstr ""

#: ../history/whatsnew-3.1.rst:540
msgid ""
"This new experimental version of the ``amqp`` result backend is a good "
"alternative to use in classical RPC scenarios, where the process that "
"initiates the task is always the process to retrieve the result."
msgstr ""

#: ../history/whatsnew-3.1.rst:544
msgid ""
"It uses Kombu to send and retrieve results, and each client uses a unique"
" queue for replies to be sent to. This avoids the significant overhead of"
" the original amqp result backend which creates one queue per task."
msgstr ""

#: ../history/whatsnew-3.1.rst:549
msgid ""
"By default results sent using this backend won't persist, so they won't "
"survive a broker restart. You can enable the "
":setting:`CELERY_RESULT_PERSISTENT` setting to change that."
msgstr ""

#: ../history/whatsnew-3.1.rst:558
msgid "Note that chords are currently not supported by the RPC backend."
msgstr ""

#: ../history/whatsnew-3.1.rst:561
msgid "Time limits can now be set by the client"
msgstr ""

#: ../history/whatsnew-3.1.rst:563
msgid ""
"Two new options have been added to the Calling API: ``time_limit`` and "
"``soft_time_limit``:"
msgstr ""

#: ../history/whatsnew-3.1.rst:574 ../history/whatsnew-3.1.rst:819
#: ../history/whatsnew-3.1.rst:832
msgid "Contributed by Mher Movsisyan."
msgstr ""

#: ../history/whatsnew-3.1.rst:577
msgid "Redis: Broadcast messages and virtual hosts"
msgstr ""

#: ../history/whatsnew-3.1.rst:579
msgid ""
"Broadcast messages are currently seen by all virtual hosts when using the"
" Redis transport. You can now fix this by enabling a prefix to all "
"channels so that the messages are separated:"
msgstr ""

#: ../history/whatsnew-3.1.rst:587
msgid ""
"Note that you'll not be able to communicate with workers running older "
"versions or workers that doesn't have this setting enabled."
msgstr ""

#: ../history/whatsnew-3.1.rst:590
msgid "This setting will be the default in a future version."
msgstr ""

#: ../history/whatsnew-3.1.rst:592
msgid "Related to Issue #1490."
msgstr ""

#: ../history/whatsnew-3.1.rst:595
msgid ":pypi:`pytz` replaces :pypi:`python-dateutil` dependency"
msgstr ""

#: ../history/whatsnew-3.1.rst:597
msgid ""
"Celery no longer depends on the :pypi:`python-dateutil` library, but "
"instead a new dependency on the :pypi:`pytz` library was added."
msgstr ""

#: ../history/whatsnew-3.1.rst:600
msgid ""
"The :pypi:`pytz` library was already recommended for accurate timezone "
"support."
msgstr ""

#: ../history/whatsnew-3.1.rst:602
msgid ""
"This also means that dependencies are the same for both Python 2 and "
"Python 3, and that the :file:`requirements/default-py3k.txt` file has "
"been removed."
msgstr ""

#: ../history/whatsnew-3.1.rst:607
msgid "Support for :pypi:`setuptools` extra requirements"
msgstr ""

#: ../history/whatsnew-3.1.rst:609
msgid ""
"Pip now supports the :pypi:`setuptools` extra requirements format, so "
"we've removed the old bundles concept, and instead specify setuptools "
"extras."
msgstr ""

#: ../history/whatsnew-3.1.rst:613
msgid "You install extras by specifying them inside brackets:"
msgstr ""

#: ../history/whatsnew-3.1.rst:619
msgid ""
"The above will install the dependencies for Redis and MongoDB. You can "
"list as many extras as you want."
msgstr ""

#: ../history/whatsnew-3.1.rst:625
msgid ""
"You can't use the ``celery-with-*`` packages anymore, as these won't be "
"updated to use Celery 3.1."
msgstr ""

#: ../history/whatsnew-3.1.rst:629
msgid "Extension"
msgstr ""

#: ../history/whatsnew-3.1.rst:629
msgid "Requirement entry"
msgstr ""

#: ../history/whatsnew-3.1.rst:629
msgid "Type"
msgstr ""

#: ../history/whatsnew-3.1.rst:631
msgid "Redis"
msgstr ""

#: ../history/whatsnew-3.1.rst:631
msgid "``celery[redis]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:631 ../history/whatsnew-3.1.rst:633
#: ../history/whatsnew-3.1.rst:643
msgid "transport, result backend"
msgstr ""

#: ../history/whatsnew-3.1.rst:633
msgid "MongoDB"
msgstr ""

#: ../history/whatsnew-3.1.rst:633
msgid "``celery[mongodb]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:635
msgid "CouchDB"
msgstr ""

#: ../history/whatsnew-3.1.rst:635
msgid "``celery[couchdb]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:635 ../history/whatsnew-3.1.rst:637
#: ../history/whatsnew-3.1.rst:639 ../history/whatsnew-3.1.rst:641
msgid "transport"
msgstr ""

#: ../history/whatsnew-3.1.rst:637
msgid "Beanstalk"
msgstr ""

#: ../history/whatsnew-3.1.rst:637
msgid "``celery[beanstalk]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:639
msgid "ZeroMQ"
msgstr ""

#: ../history/whatsnew-3.1.rst:639
msgid "``celery[zeromq]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:641
msgid "Zookeeper"
msgstr ""

#: ../history/whatsnew-3.1.rst:641
msgid "``celery[zookeeper]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:643
msgid "SQLAlchemy"
msgstr ""

#: ../history/whatsnew-3.1.rst:643
msgid "``celery[sqlalchemy]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:645
msgid "librabbitmq"
msgstr ""

#: ../history/whatsnew-3.1.rst:645
msgid "``celery[librabbitmq]``"
msgstr ""

#: ../history/whatsnew-3.1.rst:645
msgid "transport (C amqp client)"
msgstr ""

#: ../history/whatsnew-3.1.rst:648
msgid "The complete list with examples is found in the :ref:`bundles` section."
msgstr ""

#: ../history/whatsnew-3.1.rst:651
msgid "``subtask.__call__()`` now executes the task directly"
msgstr ""

#: ../history/whatsnew-3.1.rst:653
msgid ""
"A misunderstanding led to ``Signature.__call__`` being an alias of "
"``.delay`` but this doesn't conform to the calling API of ``Task`` which "
"calls the underlying task method."
msgstr ""

#: ../history/whatsnew-3.1.rst:657
msgid "This means that:"
msgstr ""

#: ../history/whatsnew-3.1.rst:667
msgid "now does the same as calling the task directly:"
msgstr ""

#: ../history/whatsnew-3.1.rst:674
msgid "In Other News"
msgstr ""

#: ../history/whatsnew-3.1.rst:676
msgid "Now depends on :ref:`Kombu 3.0 <kombu:version-3.0.0>`."
msgstr ""

#: ../history/whatsnew-3.1.rst:678
msgid "Now depends on :pypi:`billiard` version 3.3."
msgstr ""

#: ../history/whatsnew-3.1.rst:680
msgid "Worker will now crash if running as the root user with pickle enabled."
msgstr ""

#: ../history/whatsnew-3.1.rst:682
msgid ""
"Canvas: ``group.apply_async`` and ``chain.apply_async`` no longer starts "
"separate task."
msgstr ""

#: ../history/whatsnew-3.1.rst:685
msgid ""
"That the group and chord primitives supported the \"calling API\" like "
"other subtasks was a nice idea, but it was useless in practice and often "
"confused users. If you still want this behavior you can define a task to "
"do it for you."
msgstr ""

#: ../history/whatsnew-3.1.rst:690
msgid ""
"New method ``Signature.freeze()`` can be used to \"finalize\" "
"signatures/subtask."
msgstr ""

#: ../history/whatsnew-3.1.rst:693
msgid "Regular signature:"
msgstr ""

#: ../history/whatsnew-3.1.rst:704
msgid "Group:"
msgstr ""

#: ../history/whatsnew-3.1.rst:716
msgid "Chord exception behavior defined (Issue #1172)."
msgstr ""

#: ../history/whatsnew-3.1.rst:718
msgid ""
"From this version the chord callback will change state to FAILURE when a "
"task part of a chord raises an exception."
msgstr ""

#: ../history/whatsnew-3.1.rst:721
msgid "See more at :ref:`chord-errors`."
msgstr ""

#: ../history/whatsnew-3.1.rst:723
msgid ""
"New ability to specify additional command line options to the worker and "
"beat programs."
msgstr ""

#: ../history/whatsnew-3.1.rst:726
msgid ""
"The :attr:`@user_options` attribute can be used to add additional "
"command-line arguments, and expects :mod:`optparse`-style options:"
msgstr ""

#: ../history/whatsnew-3.1.rst:742
msgid ""
"All events now include a ``pid`` field, which is the process id of the "
"process that sent the event."
msgstr ""

#: ../history/whatsnew-3.1.rst:745
msgid ""
"Event heartbeats are now calculated based on the time when the event was "
"received by the monitor, and not the time reported by the worker."
msgstr ""

#: ../history/whatsnew-3.1.rst:748
msgid ""
"This means that a worker with an out-of-sync clock will no longer show as"
" 'Offline' in monitors."
msgstr ""

#: ../history/whatsnew-3.1.rst:751
msgid ""
"A warning is now emitted if the difference between the senders time and "
"the internal time is greater than 15 seconds, suggesting that the clocks "
"are out of sync."
msgstr ""

#: ../history/whatsnew-3.1.rst:755
msgid "Monotonic clock support."
msgstr ""

#: ../history/whatsnew-3.1.rst:757
msgid "A monotonic clock is now used for timeouts and scheduling."
msgstr ""

#: ../history/whatsnew-3.1.rst:759
msgid ""
"The monotonic clock function is built-in starting from Python 3.4, but we"
" also have fallback implementations for Linux and macOS."
msgstr ""

#: ../history/whatsnew-3.1.rst:762
msgid ""
":program:`celery worker` now supports a new :option:`--detach <celery "
"worker --detach>` argument to start the worker as a daemon in the "
"background."
msgstr ""

#: ../history/whatsnew-3.1.rst:766
msgid ""
":class:`@events.Receiver` now sets a ``local_received`` field for "
"incoming events, which is set to the time of when the event was received."
msgstr ""

#: ../history/whatsnew-3.1.rst:769
msgid ""
":class:`@events.Dispatcher` now accepts a ``groups`` argument which "
"decides a white-list of event groups that'll be sent."
msgstr ""

#: ../history/whatsnew-3.1.rst:772
msgid ""
"The type of an event is a string separated by '-', where the part before "
"the first '-' is the group. Currently there are only two groups: "
"``worker`` and ``task``."
msgstr ""

#: ../history/whatsnew-3.1.rst:776
msgid "A dispatcher instantiated as follows:"
msgstr ""

#: ../history/whatsnew-3.1.rst:782
msgid ""
"will only send worker related events and silently drop any attempts to "
"send events related to any other group."
msgstr ""

#: ../history/whatsnew-3.1.rst:785
msgid "New :setting:`BROKER_FAILOVER_STRATEGY` setting."
msgstr ""

#: ../history/whatsnew-3.1.rst:787
msgid ""
"This setting can be used to change the transport fail-over strategy, can "
"either be a callable returning an iterable or the name of a Kombu built-"
"in failover strategy. Default is \"round-robin\"."
msgstr ""

#: ../history/whatsnew-3.1.rst:791
msgid "Contributed by Matt Wise."
msgstr ""

#: ../history/whatsnew-3.1.rst:793
msgid "``Result.revoke`` will no longer wait for replies."
msgstr ""

#: ../history/whatsnew-3.1.rst:795
msgid ""
"You can add the ``reply=True`` argument if you really want to wait for "
"responses from the workers."
msgstr ""

#: ../history/whatsnew-3.1.rst:798
msgid "Better support for link and link_error tasks for chords."
msgstr ""

#: ../history/whatsnew-3.1.rst:800
msgid "Contributed by Steeve Morin."
msgstr ""

#: ../history/whatsnew-3.1.rst:802
msgid ""
"Worker: Now emits warning if the :setting:`CELERYD_POOL` setting is set "
"to enable the eventlet/gevent pools."
msgstr ""

#: ../history/whatsnew-3.1.rst:805
msgid ""
"The `-P` option should always be used to select the eventlet/gevent pool "
"to ensure that the patches are applied as early as possible."
msgstr ""

#: ../history/whatsnew-3.1.rst:808
msgid ""
"If you start the worker in a wrapper (like Django's :file:`manage.py`) "
"then you must apply the patches manually, for example by creating an "
"alternative wrapper that monkey patches at the start of the program "
"before importing any other modules."
msgstr ""

#: ../history/whatsnew-3.1.rst:813
msgid ""
"There's a now an 'inspect clock' command which will collect the current "
"logical clock value from workers."
msgstr ""

#: ../history/whatsnew-3.1.rst:816
msgid ""
"`celery inspect stats` now contains the process id of the worker's main "
"process."
msgstr ""

#: ../history/whatsnew-3.1.rst:821
msgid "New remote control command to dump a workers configuration."
msgstr ""

#: ../history/whatsnew-3.1.rst:823
msgid "Example:"
msgstr ""

#: ../history/whatsnew-3.1.rst:829
msgid ""
"Configuration values will be converted to values supported by JSON where "
"possible."
msgstr ""

#: ../history/whatsnew-3.1.rst:834
msgid ""
"New settings :setting:`CELERY_EVENT_QUEUE_TTL` and "
":setting:`CELERY_EVENT_QUEUE_EXPIRES`."
msgstr ""

#: ../history/whatsnew-3.1.rst:837
msgid ""
"These control when a monitors event queue is deleted, and for how long "
"events published to that queue will be visible. Only supported on "
"RabbitMQ."
msgstr ""

#: ../history/whatsnew-3.1.rst:841
msgid "New Couchbase result backend."
msgstr ""

#: ../history/whatsnew-3.1.rst:843
msgid ""
"This result backend enables you to store and retrieve task results using "
"`Couchbase`_."
msgstr ""

#: ../history/whatsnew-3.1.rst:846
msgid ""
"See :ref:`conf-couchbase-result-backend` for more information about "
"configuring this result backend."
msgstr ""

#: ../history/whatsnew-3.1.rst:849
msgid "Contributed by Alain Masiero."
msgstr ""

#: ../history/whatsnew-3.1.rst:853
msgid "CentOS init-script now supports starting multiple worker instances."
msgstr ""

#: ../history/whatsnew-3.1.rst:855
msgid "See the script header for details."
msgstr ""

#: ../history/whatsnew-3.1.rst:857
msgid "Contributed by Jonathan Jordan."
msgstr ""

#: ../history/whatsnew-3.1.rst:859
msgid "``AsyncResult.iter_native`` now sets default interval parameter to 0.5"
msgstr ""

#: ../history/whatsnew-3.1.rst:861
msgid "Fix contributed by Idan Kamara"
msgstr ""

#: ../history/whatsnew-3.1.rst:863
msgid "New setting :setting:`BROKER_LOGIN_METHOD`."
msgstr ""

#: ../history/whatsnew-3.1.rst:865
msgid ""
"This setting can be used to specify an alternate login method for the "
"AMQP transports."
msgstr ""

#: ../history/whatsnew-3.1.rst:868
msgid "Contributed by Adrien Guinet"
msgstr ""

#: ../history/whatsnew-3.1.rst:870
msgid ""
"The ``dump_conf`` remote control command will now give the string "
"representation for types that aren't JSON compatible."
msgstr ""

#: ../history/whatsnew-3.1.rst:873
msgid "Function `celery.security.setup_security` is now :func:`@setup_security`."
msgstr ""

#: ../history/whatsnew-3.1.rst:875
msgid "Task retry now propagates the message expiry value (Issue #980)."
msgstr ""

#: ../history/whatsnew-3.1.rst:877
msgid ""
"The value is forwarded at is, so the expiry time won't change. To update "
"the expiry time you'd've to pass a new expires argument to ``retry()``."
msgstr ""

#: ../history/whatsnew-3.1.rst:881
msgid "Worker now crashes if a channel error occurs."
msgstr ""

#: ../history/whatsnew-3.1.rst:883
msgid ""
"Channel errors are transport specific and is the list of exceptions "
"returned by ``Connection.channel_errors``. For RabbitMQ this means that "
"Celery will crash if the equivalence checks for one of the queues in "
":setting:`CELERY_QUEUES` mismatches, which makes sense since this is a "
"scenario where manual intervention is required."
msgstr ""

#: ../history/whatsnew-3.1.rst:890
msgid ""
"Calling ``AsyncResult.get()`` on a chain now propagates errors for "
"previous tasks (Issue #1014)."
msgstr ""

#: ../history/whatsnew-3.1.rst:893
msgid ""
"The parent attribute of ``AsyncResult`` is now reconstructed when using "
"JSON serialization (Issue #1014)."
msgstr ""

#: ../history/whatsnew-3.1.rst:896
msgid ""
"Worker disconnection logs are now logged with severity warning instead of"
" error."
msgstr ""

#: ../history/whatsnew-3.1.rst:899
msgid "Contributed by Chris Adams."
msgstr ""

#: ../history/whatsnew-3.1.rst:901
msgid "``events.State`` no longer crashes when it receives unknown event types."
msgstr ""

#: ../history/whatsnew-3.1.rst:903
msgid ""
"SQLAlchemy Result Backend: New :setting:`CELERY_RESULT_DB_TABLENAMES` "
"setting can be used to change the name of the database tables used."
msgstr ""

#: ../history/whatsnew-3.1.rst:906
msgid "Contributed by Ryan Petrello."
msgstr ""

#: ../history/whatsnew-3.1.rst:919
msgid "SQLAlchemy Result Backend: Now calls ``enginge.dispose`` after fork"
msgstr ""

#: ../history/whatsnew-3.1.rst:909
msgid "(Issue #1564)."
msgstr ""

#: ../history/whatsnew-3.1.rst:911
msgid ""
"If you create your own SQLAlchemy engines then you must also make sure "
"that these are closed after fork in the worker:"
msgstr ""

#: ../history/whatsnew-3.1.rst:921
msgid "A stress test suite for the Celery worker has been written."
msgstr ""

#: ../history/whatsnew-3.1.rst:923
msgid ""
"This is located in the ``funtests/stress`` directory in the git "
"repository. There's a README file there to get you started."
msgstr ""

#: ../history/whatsnew-3.1.rst:926
msgid ""
"The logger named ``celery.concurrency`` has been renamed to "
"``celery.pool``."
msgstr ""

#: ../history/whatsnew-3.1.rst:928
msgid "New command line utility ``celery graph``."
msgstr ""

#: ../history/whatsnew-3.1.rst:930
msgid "This utility creates graphs in GraphViz dot format."
msgstr ""

#: ../history/whatsnew-3.1.rst:932
msgid "You can create graphs from the currently installed bootsteps:"
msgstr ""

#: ../history/whatsnew-3.1.rst:946
msgid "Or graphs of workers in a cluster:"
msgstr ""

#: ../history/whatsnew-3.1.rst:966
msgid "Changed the way that app instances are pickled."
msgstr ""

#: ../history/whatsnew-3.1.rst:968
msgid ""
"Apps can now define a ``__reduce_keys__`` method that's used instead of "
"the old ``AppPickler`` attribute. For example, if your app defines a "
"custom 'foo' attribute that needs to be preserved when pickling you can "
"define a ``__reduce_keys__`` as such:"
msgstr ""

#: ../history/whatsnew-3.1.rst:988
msgid ""
"This is a much more convenient way to add support for pickling custom "
"attributes. The old ``AppPickler`` is still supported but its use is "
"discouraged and we would like to remove it in a future version."
msgstr ""

#: ../history/whatsnew-3.1.rst:992
msgid "Ability to trace imports for debugging purposes."
msgstr ""

#: ../history/whatsnew-3.1.rst:994
msgid "The :envvar:`C_IMPDEBUG` can be set to trace imports as they occur:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1005
msgid "Message headers now available as part of the task request."
msgstr ""

#: ../history/whatsnew-3.1.rst:1007
msgid "Example adding and retrieving a header value:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1017
msgid ""
"New :signal:`before_task_publish` signal dispatched before a task message"
" is sent and can be used to modify the final message fields (Issue "
"#1281)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1020
msgid ""
"New :signal:`after_task_publish` signal replaces the old "
":signal:`task_sent` signal."
msgstr ""

#: ../history/whatsnew-3.1.rst:1023
msgid "The :signal:`task_sent` signal is now deprecated and shouldn't be used."
msgstr ""

#: ../history/whatsnew-3.1.rst:1025
msgid ""
"New :signal:`worker_process_shutdown` signal is dispatched in the prefork"
" pool child processes as they exit."
msgstr ""

#: ../history/whatsnew-3.1.rst:1028
msgid "Contributed by Daniel M Taub."
msgstr ""

#: ../history/whatsnew-3.1.rst:1030
msgid "``celery.platforms.PIDFile`` renamed to :class:`celery.platforms.Pidfile`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1032
msgid "MongoDB Backend: Can now be configured using a URL:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1034
msgid "MongoDB Backend: No longer using deprecated ``pymongo.Connection``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1036
msgid "MongoDB Backend: Now disables ``auto_start_request``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1038
msgid ""
"MongoDB Backend: Now enables ``use_greenlets`` when eventlet/gevent is "
"used."
msgstr ""

#: ../history/whatsnew-3.1.rst:1040
msgid ""
"``subtask()`` / ``maybe_subtask()`` renamed to "
"``signature()``/``maybe_signature()``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1043
msgid "Aliases still available for backwards compatibility."
msgstr ""

#: ../history/whatsnew-3.1.rst:1045
msgid ""
"The ``correlation_id`` message property is now automatically set to the "
"id of the task."
msgstr ""

#: ../history/whatsnew-3.1.rst:1048
msgid ""
"The task message ``eta`` and ``expires`` fields now includes timezone "
"information."
msgstr ""

#: ../history/whatsnew-3.1.rst:1051
msgid ""
"All result backends ``store_result``/``mark_as_*`` methods must now "
"accept a ``request`` keyword argument."
msgstr ""

#: ../history/whatsnew-3.1.rst:1054
msgid "Events now emit warning if the broken ``yajl`` library is used."
msgstr ""

#: ../history/whatsnew-3.1.rst:1056
msgid ""
"The :signal:`celeryd_init` signal now takes an extra keyword argument: "
"``option``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1059
msgid ""
"This is the mapping of parsed command line arguments, and can be used to "
"prepare new preload arguments (``app.user_options['preload']``)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1062
msgid "New callback: :meth:`@on_configure`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1064
msgid ""
"This callback is called when an app is about to be configured (a "
"configuration key is required)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1067
msgid "Worker: No longer forks on :sig:`HUP`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1069
msgid ""
"This means that the worker will reuse the same pid for better support "
"with external process supervisors."
msgstr ""

#: ../history/whatsnew-3.1.rst:1072
msgid "Contributed by Jameel Al-Aziz."
msgstr ""

#: ../history/whatsnew-3.1.rst:1074
msgid ""
"Worker: The log message ``Got task from broker â€¦`` was changed to "
"``Received task â€¦``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1077
msgid ""
"Worker: The log message ``Skipping revoked task â€¦`` was changed to "
"``Discarding revoked task â€¦``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1080
msgid "Optimization: Improved performance of ``ResultSet.join_native()``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1082
msgid "Contributed by Stas Rudakou."
msgstr ""

#: ../history/whatsnew-3.1.rst:1084
msgid ""
"The :signal:`task_revoked` signal now accepts new ``request`` argument "
"(Issue #1555)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1087
msgid ""
"The revoked signal is dispatched after the task request is removed from "
"the stack, so it must instead use the "
":class:`~celery.worker.request.Request` object to get information about "
"the task."
msgstr ""

#: ../history/whatsnew-3.1.rst:1092
msgid ""
"Worker: New :option:`-X <celery worker -X>` command line argument to "
"exclude queues (Issue #1399)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1095
msgid ""
"The :option:`-X <celery worker -X>` argument is the inverse of the "
":option:`-Q <celery worker -Q>` argument and accepts a list of queues to "
"exclude (not consume from):"
msgstr ""

#: ../history/whatsnew-3.1.rst:1104
msgid ""
"Adds :envvar:`C_FAKEFORK` environment variable for simple init-"
"script/:program:`celery multi` debugging."
msgstr ""

#: ../history/whatsnew-3.1.rst:1107
msgid "This means that you can now do:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1113
msgid "or:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1119
msgid ""
"to avoid the daemonization step to see errors that aren't visible due to "
"missing stdout/stderr."
msgstr ""

#: ../history/whatsnew-3.1.rst:1122
msgid ""
"A ``dryrun`` command has been added to the generic init-script that "
"enables this option."
msgstr ""

#: ../history/whatsnew-3.1.rst:1125
msgid "New public API to push and pop from the current task stack:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1127
msgid ""
":func:`celery.app.push_current_task` and "
":func:`celery.app.pop_current_task``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1130
msgid "``RetryTaskError`` has been renamed to :exc:`~celery.exceptions.Retry`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1132
msgid "The old name is still available for backwards compatibility."
msgstr ""

#: ../history/whatsnew-3.1.rst:1134
msgid "New semi-predicate exception :exc:`~celery.exceptions.Reject`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1136
msgid ""
"This exception can be raised to ``reject``/``requeue`` the task message, "
"see :ref:`task-semipred-reject` for examples."
msgstr ""

#: ../history/whatsnew-3.1.rst:1139
msgid ""
":ref:`Semipredicates <task-semipredicates>` documented: "
"(Retry/Ignore/Reject)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1145
msgid "Scheduled Removals"
msgstr ""

#: ../history/whatsnew-3.1.rst:1147
msgid ""
"The ``BROKER_INSIST`` setting and the ``insist`` argument to "
"``~@connection`` is no longer supported."
msgstr ""

#: ../history/whatsnew-3.1.rst:1150
msgid ""
"The ``CELERY_AMQP_TASK_RESULT_CONNECTION_MAX`` setting is no longer "
"supported."
msgstr ""

#: ../history/whatsnew-3.1.rst:1153
msgid "Use :setting:`BROKER_POOL_LIMIT` instead."
msgstr ""

#: ../history/whatsnew-3.1.rst:1155
msgid "The ``CELERY_TASK_ERROR_WHITELIST`` setting is no longer supported."
msgstr ""

#: ../history/whatsnew-3.1.rst:1157
msgid ""
"You should set the :class:`~celery.utils.mail.ErrorMail` attribute of the"
" task class instead. You can also do this using "
":setting:`CELERY_ANNOTATIONS`:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1179
msgid ""
"Functions that creates a broker connections no longer supports the "
"``connect_timeout`` argument."
msgstr ""

#: ../history/whatsnew-3.1.rst:1182
msgid ""
"This can now only be set using the :setting:`BROKER_CONNECTION_TIMEOUT` "
"setting. This is because functions no longer create connections directly,"
" but instead get them from the connection pool."
msgstr ""

#: ../history/whatsnew-3.1.rst:1186
msgid "The ``CELERY_AMQP_TASK_RESULT_EXPIRES`` setting is no longer supported."
msgstr ""

#: ../history/whatsnew-3.1.rst:1188
msgid "Use :setting:`CELERY_TASK_RESULT_EXPIRES` instead."
msgstr ""

#: ../history/whatsnew-3.1.rst:1193
msgid "Deprecation Time-line Changes"
msgstr ""

#: ../history/whatsnew-3.1.rst:1195
msgid "See the :ref:`deprecation-timeline`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1200
msgid "Fixes"
msgstr ""

#: ../history/whatsnew-3.1.rst:1202
msgid ""
"AMQP Backend: join didn't convert exceptions when using the json "
"serializer."
msgstr ""

#: ../history/whatsnew-3.1.rst:1205
msgid "Non-abstract task classes are now shared between apps (Issue #1150)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1207
msgid ""
"Note that non-abstract task classes shouldn't be used in the new API. You"
" should only create custom task classes when you use them as a base class"
" in the ``@task`` decorator."
msgstr ""

#: ../history/whatsnew-3.1.rst:1211
msgid ""
"This fix ensure backwards compatibility with older Celery versions so "
"that non-abstract task classes works even if a module is imported "
"multiple times so that the app is also instantiated multiple times."
msgstr ""

#: ../history/whatsnew-3.1.rst:1215
msgid "Worker: Workaround for Unicode errors in logs (Issue #427)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1217
msgid ""
"Task methods: ``.apply_async`` now works properly if args list is None "
"(Issue #1459)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1220
msgid ""
"Eventlet/gevent/solo/threads pools now properly handles "
":exc:`BaseException` errors raised by tasks."
msgstr ""

#: ../history/whatsnew-3.1.rst:1223
msgid ""
":control:`autoscale` and :control:`pool_grow`/:control:`pool_shrink` "
"remote control commands will now also automatically increase and decrease"
" the consumer prefetch count."
msgstr ""

#: ../history/whatsnew-3.1.rst:1227
msgid "Fix contributed by Daniel M. Taub."
msgstr ""

#: ../history/whatsnew-3.1.rst:1229
msgid "``celery control pool_`` commands didn't coerce string arguments to int."
msgstr ""

#: ../history/whatsnew-3.1.rst:1231
msgid ""
"Redis/Cache chords: Callback result is now set to failure if the group "
"disappeared from the database (Issue #1094)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1234
msgid ""
"Worker: Now makes sure that the shutdown process isn't initiated more "
"than once."
msgstr ""

#: ../history/whatsnew-3.1.rst:1237
msgid ""
"Programs: :program:`celery multi` now properly handles both ``-f`` and "
":option:`--logfile <celery worker --logfile>` options (Issue #1541)."
msgstr ""

#: ../history/whatsnew-3.1.rst:1243
msgid "Internal changes"
msgstr ""

#: ../history/whatsnew-3.1.rst:1245
msgid "Module ``celery.task.trace`` has been renamed to :mod:`celery.app.trace`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1247
msgid ""
"Module ``celery.concurrency.processes`` has been renamed to "
":mod:`celery.concurrency.prefork`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1250
msgid "Classes that no longer fall back to using the default app:"
msgstr ""

#: ../history/whatsnew-3.1.rst:1252
msgid "Result backends (:class:`celery.backends.base.BaseBackend`)"
msgstr ""

#: ../history/whatsnew-3.1.rst:1253
msgid ":class:`celery.worker.WorkController`"
msgstr ""

#: ../history/whatsnew-3.1.rst:1254
msgid ":class:`celery.worker.Consumer`"
msgstr ""

#: ../history/whatsnew-3.1.rst:1255
msgid ":class:`celery.worker.request.Request`"
msgstr ""

#: ../history/whatsnew-3.1.rst:1257
msgid ""
"This means that you have to pass a specific app when instantiating these "
"classes."
msgstr ""

#: ../history/whatsnew-3.1.rst:1260
msgid ""
"``EventDispatcher.copy_buffer`` renamed to "
":meth:`@events.Dispatcher.extend_buffer`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1263
msgid ""
"Removed unused and never documented global instance "
"``celery.events.state.state``."
msgstr ""

#: ../history/whatsnew-3.1.rst:1266
msgid ""
":class:`@events.Receiver` is now a :class:`kombu.mixins.ConsumerMixin` "
"subclass."
msgstr ""

#: ../history/whatsnew-3.1.rst:1269
msgid ""
":class:`celery.apps.worker.Worker` has been refactored as a subclass of "
":class:`celery.worker.WorkController`."
msgstr ""

#: ../history/whatsnew-3.1.rst:1272
msgid "This removes a lot of duplicate functionality."
msgstr ""

#: ../history/whatsnew-3.1.rst:1274
msgid ""
"The ``Celery.with_default_connection`` method has been removed in favor "
"of ``with app.connection_or_acquire`` (:meth:`@connection_or_acquire`)"
msgstr ""

#: ../history/whatsnew-3.1.rst:1277
msgid ""
"The ``celery.results.BaseDictBackend`` class has been removed and is "
"replaced by :class:`celery.results.BaseBackend`."
msgstr ""

